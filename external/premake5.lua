-- Copyright (C) 2021 Force67 <github.com/Force67>.
-- For licensing information see LICENSE at the root of this distribution.

require("premake-idaqt/qt")
qt = premake.modules.qt

project("sockpp")
    kind("StaticLib")
    language("C++")
    includedirs({
        "sockpp/include"
    })
    files({
        "sockpp/include/sockpp/*.h",
        "sockpp/src/*.cpp"
    })
    filter("system:windows")
        links("Ws2_32")
        removefiles("sockpp/include/sockpp/unix_*")

project("sqlite")
    kind("StaticLib")
    language("C")
    includedirs({
        "./sqlite"
    })
    files({
        "sqlite/*.h",
        "sqlite/*.c"
    })
    defines({
        "SQLITE_ENABLE_SQLLOG",
    })

    filter ("configurations:Debug")
        defines("SQLITE_DEBUG")

project("fmtlib")
    language("C++")
    kind("StaticLib")
    includedirs({
        "fmt/include",
    })
    files({
        "fmt/src/format.cc",
        "fmt/src/os.cc",
    })

project("GoogleMock")
    language("C++")
    kind("StaticLib")
    includedirs({
        "googletest/googlemock/include",
        "googletest/googletest/include",
        "googletest/googlemock",
        "googletest/googletest"
    })
    files({
        "googletest/googlemock/src/gmock-all.cc",
        "googletest/googletest/src/gtest-all.cc",
        --"googletest/googlemock/src/*.cc",
        --"googletest/googletest/src/*.cc",
        "googletest/googlemock/include/gmock/**.h",
        --"googletest/googletest/include/gtes/**.h",
    })

project("glew")
    language("C")
    kind("StaticLib")
    includedirs({
        "glew/include",
    })
    defines({
        "GLEW_STATIC"
    })
    files({
        "glew/src/glew.c",
        "glew/src/glewinfo.c",
        "glew/src/visualinfo.c"
    })

project("glfw")
    language("C")
    kind("StaticLib")
    includedirs({
        "glfw/include",
        "glfw/src"
    })
    files({
        "glfw/include/*.h",
        "glfw/src/context.c",
        "glfw/src/init.c",
        "glfw/src/input.c",
        "glfw/src/monitor.c",
        "glfw/src/vulkan.c",
        "glfw/src/window.c"
    })
    defines({
        "GLEW_STATIC"
    })
    filter("system:windows")
        defines({
            "_GLFW_WIN32",
            "GLFW_EXPOSE_NATIVE_WIN32"
        })
        files({
            "glfw/src/win32_platform.h",
            "glfw/src/win32_joystick.h",
            "glfw/src/wgl_context.h",
            "glfw/src/egl_context.h",
            "glfw/src/osmesa_context.h",
            "glfw/src/win32_init.c",
            "glfw/src/win32_joystick.c",
            "glfw/src/win32_monitor.c",
            "glfw/src/win32_time.c",
            "glfw/src/win32_thread.c",
            "glfw/src/win32_window.c",
            "glfw/src/wgl_context.c",
            "glfw/src/egl_context.c",
            "glfw/src/osmesa_context.c",
        })
    filter{}

project("imgui")
    language("C++")
    kind("StaticLib")
    includedirs({
        "./imgui",
        "glew/include",
        "glfw/include",
    })
    defines({
        "GLEW_STATIC"
    })
    files({
        "imgui/imgui.cpp",
        "imgui/imgui.h",
        "imgui/imgui_draw.cpp",
        "imgui/imgui_internal.h",
        "imgui/imgui_tables.cpp",
        "imgui/imgui_widgets.cpp",
        "imgui/imstb_rectpack.h",
        "imgui/imstb_textedit.h",
        "imgui/imstb_truetype.h",
        "imgui/backends/imgui_impl_glfw.cpp",
        "imgui/backends/imgui_impl_glfw.h",
        "imgui/backends/imgui_impl_opengl3.cpp",
        "imgui/backends/imgui_impl_opengl3.h"
    })