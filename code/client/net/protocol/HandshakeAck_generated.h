// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HANDSHAKEACK_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_HANDSHAKEACK_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

namespace protocol {

struct HandshakeAck;
struct HandshakeAckBuilder;

struct HandshakeAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HandshakeAckBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_PROJECT = 6,
    VT_DBREMOTEVERSION = 8
  };
  const flatbuffers::String *userName() const {
    return GetPointer<const flatbuffers::String *>(VT_USERNAME);
  }
  const flatbuffers::String *project() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJECT);
  }
  uint32_t dbRemoteVersion() const {
    return GetField<uint32_t>(VT_DBREMOTEVERSION, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(userName()) &&
           VerifyOffset(verifier, VT_PROJECT) &&
           verifier.VerifyString(project()) &&
           VerifyField<uint32_t>(verifier, VT_DBREMOTEVERSION) &&
           verifier.EndTable();
  }
};

struct HandshakeAckBuilder {
  typedef HandshakeAck Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_userName(flatbuffers::Offset<flatbuffers::String> userName) {
    fbb_.AddOffset(HandshakeAck::VT_USERNAME, userName);
  }
  void add_project(flatbuffers::Offset<flatbuffers::String> project) {
    fbb_.AddOffset(HandshakeAck::VT_PROJECT, project);
  }
  void add_dbRemoteVersion(uint32_t dbRemoteVersion) {
    fbb_.AddElement<uint32_t>(HandshakeAck::VT_DBREMOTEVERSION, dbRemoteVersion, 0);
  }
  explicit HandshakeAckBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HandshakeAckBuilder &operator=(const HandshakeAckBuilder &);
  flatbuffers::Offset<HandshakeAck> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HandshakeAck>(end);
    return o;
  }
};

inline flatbuffers::Offset<HandshakeAck> CreateHandshakeAck(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> userName = 0,
    flatbuffers::Offset<flatbuffers::String> project = 0,
    uint32_t dbRemoteVersion = 0) {
  HandshakeAckBuilder builder_(_fbb);
  builder_.add_dbRemoteVersion(dbRemoteVersion);
  builder_.add_project(project);
  builder_.add_userName(userName);
  return builder_.Finish();
}

inline flatbuffers::Offset<HandshakeAck> CreateHandshakeAckDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *userName = nullptr,
    const char *project = nullptr,
    uint32_t dbRemoteVersion = 0) {
  auto userName__ = userName ? _fbb.CreateString(userName) : 0;
  auto project__ = project ? _fbb.CreateString(project) : 0;
  return protocol::CreateHandshakeAck(
      _fbb,
      userName__,
      project__,
      dbRemoteVersion);
}

inline const protocol::HandshakeAck *GetHandshakeAck(const void *buf) {
  return flatbuffers::GetRoot<protocol::HandshakeAck>(buf);
}

inline const protocol::HandshakeAck *GetSizePrefixedHandshakeAck(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<protocol::HandshakeAck>(buf);
}

inline bool VerifyHandshakeAckBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<protocol::HandshakeAck>(nullptr);
}

inline bool VerifySizePrefixedHandshakeAckBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<protocol::HandshakeAck>(nullptr);
}

inline void FinishHandshakeAckBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<protocol::HandshakeAck> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHandshakeAckBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<protocol::HandshakeAck> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace protocol

#endif  // FLATBUFFERS_GENERATED_HANDSHAKEACK_PROTOCOL_H_
