// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_IDBSYNC_PROTOCOL_SYNC_H_
#define FLATBUFFERS_GENERATED_IDBSYNC_PROTOCOL_SYNC_H_

#include "flatbuffers/flatbuffers.h"

namespace protocol {
namespace sync {

struct NameAddr;
struct NameAddrBuilder;

struct NameAddr FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NameAddrBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ADDR = 4,
    VT_NAME = 6,
    VT_LOCAL = 8
  };
  uint64_t addr() const {
    return GetField<uint64_t>(VT_ADDR, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool local() const {
    return GetField<uint8_t>(VT_LOCAL, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ADDR) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_LOCAL) &&
           verifier.EndTable();
  }
};

struct NameAddrBuilder {
  typedef NameAddr Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_addr(uint64_t addr) {
    fbb_.AddElement<uint64_t>(NameAddr::VT_ADDR, addr, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(NameAddr::VT_NAME, name);
  }
  void add_local(bool local) {
    fbb_.AddElement<uint8_t>(NameAddr::VT_LOCAL, static_cast<uint8_t>(local), 0);
  }
  explicit NameAddrBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NameAddrBuilder &operator=(const NameAddrBuilder &);
  flatbuffers::Offset<NameAddr> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NameAddr>(end);
    return o;
  }
};

inline flatbuffers::Offset<NameAddr> CreateNameAddr(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t addr = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    bool local = false) {
  NameAddrBuilder builder_(_fbb);
  builder_.add_addr(addr);
  builder_.add_name(name);
  builder_.add_local(local);
  return builder_.Finish();
}

inline flatbuffers::Offset<NameAddr> CreateNameAddrDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t addr = 0,
    const char *name = nullptr,
    bool local = false) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return protocol::sync::CreateNameAddr(
      _fbb,
      addr,
      name__,
      local);
}

}  // namespace sync
}  // namespace protocol

#endif  // FLATBUFFERS_GENERATED_IDBSYNC_PROTOCOL_SYNC_H_
