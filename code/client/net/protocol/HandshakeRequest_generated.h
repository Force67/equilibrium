// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_HANDSHAKEREQUEST_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_HANDSHAKEREQUEST_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

namespace protocol
{
  struct HandshakeRequest;
  struct HandshakeRequestBuilder;

  struct HandshakeRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef HandshakeRequestBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_CLIENTVERSION = 4,
	  VT_HWID = 6,
	  VT_USER = 8,
	  VT_PASS = 10,
	  VT_DBVERSION = 12,
	  VT_DBMD5 = 14,
	  VT_DBNAME = 16
	};
	uint16_t clientVersion() const
	{
	  return GetField<uint16_t>(VT_CLIENTVERSION, 0);
	}
	const flatbuffers::String *hwid() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_HWID);
	}
	const flatbuffers::String *user() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_USER);
	}
	const flatbuffers::String *pass() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_PASS);
	}
	uint16_t dbVersion() const
	{
	  return GetField<uint16_t>(VT_DBVERSION, 0);
	}
	const flatbuffers::String *dbMD5() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_DBMD5);
	}
	const flatbuffers::String *dbName() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_DBNAME);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
	         VerifyField<uint16_t>(verifier, VT_CLIENTVERSION) &&
	         VerifyOffset(verifier, VT_HWID) &&
	         verifier.VerifyString(hwid()) &&
	         VerifyOffset(verifier, VT_USER) &&
	         verifier.VerifyString(user()) &&
	         VerifyOffset(verifier, VT_PASS) &&
	         verifier.VerifyString(pass()) &&
	         VerifyField<uint16_t>(verifier, VT_DBVERSION) &&
	         VerifyOffset(verifier, VT_DBMD5) &&
	         verifier.VerifyString(dbMD5()) &&
	         VerifyOffset(verifier, VT_DBNAME) &&
	         verifier.VerifyString(dbName()) &&
	         verifier.EndTable();
	}
  };

  struct HandshakeRequestBuilder {
	typedef HandshakeRequest Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_clientVersion(uint16_t clientVersion)
	{
	  fbb_.AddElement<uint16_t>(HandshakeRequest::VT_CLIENTVERSION, clientVersion, 0);
	}
	void add_hwid(flatbuffers::Offset<flatbuffers::String> hwid)
	{
	  fbb_.AddOffset(HandshakeRequest::VT_HWID, hwid);
	}
	void add_user(flatbuffers::Offset<flatbuffers::String> user)
	{
	  fbb_.AddOffset(HandshakeRequest::VT_USER, user);
	}
	void add_pass(flatbuffers::Offset<flatbuffers::String> pass)
	{
	  fbb_.AddOffset(HandshakeRequest::VT_PASS, pass);
	}
	void add_dbVersion(uint16_t dbVersion)
	{
	  fbb_.AddElement<uint16_t>(HandshakeRequest::VT_DBVERSION, dbVersion, 0);
	}
	void add_dbMD5(flatbuffers::Offset<flatbuffers::String> dbMD5)
	{
	  fbb_.AddOffset(HandshakeRequest::VT_DBMD5, dbMD5);
	}
	void add_dbName(flatbuffers::Offset<flatbuffers::String> dbName)
	{
	  fbb_.AddOffset(HandshakeRequest::VT_DBNAME, dbName);
	}
	explicit HandshakeRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	HandshakeRequestBuilder &operator=(const HandshakeRequestBuilder &);
	flatbuffers::Offset<HandshakeRequest> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<HandshakeRequest>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<HandshakeRequest> CreateHandshakeRequest(
      flatbuffers::FlatBufferBuilder &_fbb,
      uint16_t clientVersion = 0,
      flatbuffers::Offset<flatbuffers::String> hwid = 0,
      flatbuffers::Offset<flatbuffers::String> user = 0,
      flatbuffers::Offset<flatbuffers::String> pass = 0,
      uint16_t dbVersion = 0,
      flatbuffers::Offset<flatbuffers::String> dbMD5 = 0,
      flatbuffers::Offset<flatbuffers::String> dbName = 0)
  {
	HandshakeRequestBuilder builder_(_fbb);
	builder_.add_dbName(dbName);
	builder_.add_dbMD5(dbMD5);
	builder_.add_pass(pass);
	builder_.add_user(user);
	builder_.add_hwid(hwid);
	builder_.add_dbVersion(dbVersion);
	builder_.add_clientVersion(clientVersion);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<HandshakeRequest> CreateHandshakeRequestDirect(
      flatbuffers::FlatBufferBuilder &_fbb,
      uint16_t clientVersion = 0,
      const char *hwid = nullptr,
      const char *user = nullptr,
      const char *pass = nullptr,
      uint16_t dbVersion = 0,
      const char *dbMD5 = nullptr,
      const char *dbName = nullptr)
  {
	auto hwid__ = hwid ? _fbb.CreateString(hwid) : 0;
	auto user__ = user ? _fbb.CreateString(user) : 0;
	auto pass__ = pass ? _fbb.CreateString(pass) : 0;
	auto dbMD5__ = dbMD5 ? _fbb.CreateString(dbMD5) : 0;
	auto dbName__ = dbName ? _fbb.CreateString(dbName) : 0;
	return protocol::CreateHandshakeRequest(
	    _fbb,
	    clientVersion,
	    hwid__,
	    user__,
	    pass__,
	    dbVersion,
	    dbMD5__,
	    dbName__);
  }

  inline const protocol::HandshakeRequest *GetHandshakeRequest(const void *buf)
  {
	return flatbuffers::GetRoot<protocol::HandshakeRequest>(buf);
  }

  inline const protocol::HandshakeRequest *GetSizePrefixedHandshakeRequest(const void *buf)
  {
	return flatbuffers::GetSizePrefixedRoot<protocol::HandshakeRequest>(buf);
  }

  inline bool VerifyHandshakeRequestBuffer(
      flatbuffers::Verifier &verifier)
  {
	return verifier.VerifyBuffer<protocol::HandshakeRequest>(nullptr);
  }

  inline bool VerifySizePrefixedHandshakeRequestBuffer(
      flatbuffers::Verifier &verifier)
  {
	return verifier.VerifySizePrefixedBuffer<protocol::HandshakeRequest>(nullptr);
  }

  inline void FinishHandshakeRequestBuffer(
      flatbuffers::FlatBufferBuilder &fbb,
      flatbuffers::Offset<protocol::HandshakeRequest> root)
  {
	fbb.Finish(root);
  }

  inline void FinishSizePrefixedHandshakeRequestBuffer(
      flatbuffers::FlatBufferBuilder &fbb,
      flatbuffers::Offset<protocol::HandshakeRequest> root)
  {
	fbb.FinishSizePrefixed(root);
  }

} // namespace protocol

#endif // FLATBUFFERS_GENERATED_HANDSHAKEREQUEST_PROTOCOL_H_
