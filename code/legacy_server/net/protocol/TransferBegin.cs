// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace protocol
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TransferBegin : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TransferBegin GetRootAsTransferBegin(ByteBuffer _bb) { return GetRootAsTransferBegin(_bb, new TransferBegin()); }
  public static TransferBegin GetRootAsTransferBegin(ByteBuffer _bb, TransferBegin obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TransferBegin __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint TransferId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string FileName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFileNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFileNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFileNameArray() { return __p.__vector_as_array<byte>(6); }
  public uint FileSize { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint NumChunks { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<protocol.TransferBegin> CreateTransferBegin(FlatBufferBuilder builder,
      uint transferId = 0,
      StringOffset fileNameOffset = default(StringOffset),
      uint fileSize = 0,
      uint numChunks = 0) {
    builder.StartTable(4);
    TransferBegin.AddNumChunks(builder, numChunks);
    TransferBegin.AddFileSize(builder, fileSize);
    TransferBegin.AddFileName(builder, fileNameOffset);
    TransferBegin.AddTransferId(builder, transferId);
    return TransferBegin.EndTransferBegin(builder);
  }

  public static void StartTransferBegin(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddTransferId(FlatBufferBuilder builder, uint transferId) { builder.AddUint(0, transferId, 0); }
  public static void AddFileName(FlatBufferBuilder builder, StringOffset fileNameOffset) { builder.AddOffset(1, fileNameOffset.Value, 0); }
  public static void AddFileSize(FlatBufferBuilder builder, uint fileSize) { builder.AddUint(2, fileSize, 0); }
  public static void AddNumChunks(FlatBufferBuilder builder, uint numChunks) { builder.AddUint(3, numChunks, 0); }
  public static Offset<protocol.TransferBegin> EndTransferBegin(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.TransferBegin>(o);
  }
};


}
