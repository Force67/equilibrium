// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace protocol.sync
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ChangeRangeComment : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ChangeRangeComment GetRootAsChangeRangeComment(ByteBuffer _bb) { return GetRootAsChangeRangeComment(_bb, new ChangeRangeComment()); }
  public static ChangeRangeComment GetRootAsChangeRangeComment(ByteBuffer _bb, ChangeRangeComment obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ChangeRangeComment __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Ea { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public int Kind { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Comment { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCommentBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCommentArray() { return __p.__vector_as_array<byte>(8); }
  public bool Repeatable { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<protocol.sync.ChangeRangeComment> CreateChangeRangeComment(FlatBufferBuilder builder,
      ulong ea = 0,
      int kind = 0,
      StringOffset commentOffset = default(StringOffset),
      bool repeatable = false) {
    builder.StartTable(4);
    ChangeRangeComment.AddEa(builder, ea);
    ChangeRangeComment.AddComment(builder, commentOffset);
    ChangeRangeComment.AddKind(builder, kind);
    ChangeRangeComment.AddRepeatable(builder, repeatable);
    return ChangeRangeComment.EndChangeRangeComment(builder);
  }

  public static void StartChangeRangeComment(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEa(FlatBufferBuilder builder, ulong ea) { builder.AddUlong(0, ea, 0); }
  public static void AddKind(FlatBufferBuilder builder, int kind) { builder.AddInt(1, kind, 0); }
  public static void AddComment(FlatBufferBuilder builder, StringOffset commentOffset) { builder.AddOffset(2, commentOffset.Value, 0); }
  public static void AddRepeatable(FlatBufferBuilder builder, bool repeatable) { builder.AddBool(3, repeatable, false); }
  public static Offset<protocol.sync.ChangeRangeComment> EndChangeRangeComment(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.sync.ChangeRangeComment>(o);
  }
};


}
