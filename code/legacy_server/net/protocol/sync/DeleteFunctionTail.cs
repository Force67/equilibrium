// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace protocol.sync
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DeleteFunctionTail : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DeleteFunctionTail GetRootAsDeleteFunctionTail(ByteBuffer _bb) { return GetRootAsDeleteFunctionTail(_bb, new DeleteFunctionTail()); }
  public static DeleteFunctionTail GetRootAsDeleteFunctionTail(ByteBuffer _bb, DeleteFunctionTail obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DeleteFunctionTail __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Funcea { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong Tailea { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<protocol.sync.DeleteFunctionTail> CreateDeleteFunctionTail(FlatBufferBuilder builder,
      ulong funcea = 0,
      ulong tailea = 0) {
    builder.StartTable(2);
    DeleteFunctionTail.AddTailea(builder, tailea);
    DeleteFunctionTail.AddFuncea(builder, funcea);
    return DeleteFunctionTail.EndDeleteFunctionTail(builder);
  }

  public static void StartDeleteFunctionTail(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFuncea(FlatBufferBuilder builder, ulong funcea) { builder.AddUlong(0, funcea, 0); }
  public static void AddTailea(FlatBufferBuilder builder, ulong tailea) { builder.AddUlong(1, tailea, 0); }
  public static Offset<protocol.sync.DeleteFunctionTail> EndDeleteFunctionTail(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.sync.DeleteFunctionTail>(o);
  }
};


}
