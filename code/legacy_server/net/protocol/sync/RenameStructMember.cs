// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace protocol.sync
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RenameStructMember : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RenameStructMember GetRootAsRenameStructMember(ByteBuffer _bb) { return GetRootAsRenameStructMember(_bb, new RenameStructMember()); }
  public static RenameStructMember GetRootAsRenameStructMember(ByteBuffer _bb, RenameStructMember obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RenameStructMember __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string StructName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStructNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetStructNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetStructNameArray() { return __p.__vector_as_array<byte>(4); }
  public string MemberName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMemberNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMemberNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMemberNameArray() { return __p.__vector_as_array<byte>(6); }
  public ulong Offset { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<protocol.sync.RenameStructMember> CreateRenameStructMember(FlatBufferBuilder builder,
      StringOffset structNameOffset = default(StringOffset),
      StringOffset memberNameOffset = default(StringOffset),
      ulong offset = 0) {
    builder.StartTable(3);
    RenameStructMember.AddOffset(builder, offset);
    RenameStructMember.AddMemberName(builder, memberNameOffset);
    RenameStructMember.AddStructName(builder, structNameOffset);
    return RenameStructMember.EndRenameStructMember(builder);
  }

  public static void StartRenameStructMember(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddStructName(FlatBufferBuilder builder, StringOffset structNameOffset) { builder.AddOffset(0, structNameOffset.Value, 0); }
  public static void AddMemberName(FlatBufferBuilder builder, StringOffset memberNameOffset) { builder.AddOffset(1, memberNameOffset.Value, 0); }
  public static void AddOffset(FlatBufferBuilder builder, ulong offset) { builder.AddUlong(2, offset, 0); }
  public static Offset<protocol.sync.RenameStructMember> EndRenameStructMember(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.sync.RenameStructMember>(o);
  }
};


}
