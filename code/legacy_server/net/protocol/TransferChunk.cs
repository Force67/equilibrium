// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace protocol
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TransferChunk : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TransferChunk GetRootAsTransferChunk(ByteBuffer _bb) { return GetRootAsTransferChunk(_bb, new TransferChunk()); }
  public static TransferChunk GetRootAsTransferChunk(ByteBuffer _bb, TransferChunk obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TransferChunk __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint TransferId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint ChunkId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public byte Data(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<protocol.TransferChunk> CreateTransferChunk(FlatBufferBuilder builder,
      uint transferId = 0,
      uint chunkId = 0,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(3);
    TransferChunk.AddData(builder, dataOffset);
    TransferChunk.AddChunkId(builder, chunkId);
    TransferChunk.AddTransferId(builder, transferId);
    return TransferChunk.EndTransferChunk(builder);
  }

  public static void StartTransferChunk(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTransferId(FlatBufferBuilder builder, uint transferId) { builder.AddUint(0, transferId, 0); }
  public static void AddChunkId(FlatBufferBuilder builder, uint chunkId) { builder.AddUint(1, chunkId, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(2, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<protocol.TransferChunk> EndTransferChunk(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.TransferChunk>(o);
  }
};


}
