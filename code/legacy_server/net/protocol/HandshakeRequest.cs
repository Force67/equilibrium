// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace protocol
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct HandshakeRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static HandshakeRequest GetRootAsHandshakeRequest(ByteBuffer _bb) { return GetRootAsHandshakeRequest(_bb, new HandshakeRequest()); }
  public static HandshakeRequest GetRootAsHandshakeRequest(ByteBuffer _bb, HandshakeRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HandshakeRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort ProtocolVersion { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public string Token { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTokenBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTokenBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTokenArray() { return __p.__vector_as_array<byte>(6); }
  public string Guid { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGuidBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetGuidBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetGuidArray() { return __p.__vector_as_array<byte>(8); }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public string Password { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPasswordBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetPasswordBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPasswordArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<protocol.HandshakeRequest> CreateHandshakeRequest(FlatBufferBuilder builder,
      ushort protocolVersion = 0,
      StringOffset tokenOffset = default(StringOffset),
      StringOffset guidOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset passwordOffset = default(StringOffset)) {
    builder.StartTable(5);
    HandshakeRequest.AddPassword(builder, passwordOffset);
    HandshakeRequest.AddName(builder, nameOffset);
    HandshakeRequest.AddGuid(builder, guidOffset);
    HandshakeRequest.AddToken(builder, tokenOffset);
    HandshakeRequest.AddProtocolVersion(builder, protocolVersion);
    return HandshakeRequest.EndHandshakeRequest(builder);
  }

  public static void StartHandshakeRequest(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddProtocolVersion(FlatBufferBuilder builder, ushort protocolVersion) { builder.AddUshort(0, protocolVersion, 0); }
  public static void AddToken(FlatBufferBuilder builder, StringOffset tokenOffset) { builder.AddOffset(1, tokenOffset.Value, 0); }
  public static void AddGuid(FlatBufferBuilder builder, StringOffset guidOffset) { builder.AddOffset(2, guidOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddPassword(FlatBufferBuilder builder, StringOffset passwordOffset) { builder.AddOffset(4, passwordOffset.Value, 0); }
  public static Offset<protocol.HandshakeRequest> EndHandshakeRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.HandshakeRequest>(o);
  }
};


}
