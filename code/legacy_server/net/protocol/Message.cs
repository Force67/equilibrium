// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace protocol
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Message : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Message GetRootAsMessage(ByteBuffer _bb) { return GetRootAsMessage(_bb, new Message()); }
  public static Message GetRootAsMessage(ByteBuffer _bb, Message obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Message __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public protocol.MsgType MsgType { get { int o = __p.__offset(4); return o != 0 ? (protocol.MsgType)__p.bb.Get(o + __p.bb_pos) : protocol.MsgType.NONE; } }
  public TTable? Msg<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<protocol.Message> CreateMessage(FlatBufferBuilder builder,
      protocol.MsgType msg_type = protocol.MsgType.NONE,
      int msgOffset = 0) {
    builder.StartTable(2);
    Message.AddMsg(builder, msgOffset);
    Message.AddMsgType(builder, msg_type);
    return Message.EndMessage(builder);
  }

  public static void StartMessage(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMsgType(FlatBufferBuilder builder, protocol.MsgType msgType) { builder.AddByte(0, (byte)msgType, 0); }
  public static void AddMsg(FlatBufferBuilder builder, int msgOffset) { builder.AddOffset(1, msgOffset, 0); }
  public static Offset<protocol.Message> EndMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.Message>(o);
  }
  public static void FinishMessageBuffer(FlatBufferBuilder builder, Offset<protocol.Message> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMessageBuffer(FlatBufferBuilder builder, Offset<protocol.Message> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
