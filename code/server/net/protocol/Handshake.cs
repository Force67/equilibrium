// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace protocol
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Handshake : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Handshake GetRootAsHandshake(ByteBuffer _bb) { return GetRootAsHandshake(_bb, new Handshake()); }
  public static Handshake GetRootAsHandshake(ByteBuffer _bb, Handshake obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Handshake __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort ClientVersion { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public string Hwid { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHwidBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetHwidBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetHwidArray() { return __p.__vector_as_array<byte>(6); }
  public string User { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUserBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetUserBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetUserArray() { return __p.__vector_as_array<byte>(8); }
  public string Pass { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPassBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPassBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPassArray() { return __p.__vector_as_array<byte>(10); }
  public ushort DbVersion { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public string DbMD5 { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDbMD5Bytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDbMD5Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDbMD5Array() { return __p.__vector_as_array<byte>(14); }
  public string DbName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDbNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetDbNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetDbNameArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<protocol.Handshake> CreateHandshake(FlatBufferBuilder builder,
      ushort clientVersion = 0,
      StringOffset hwidOffset = default(StringOffset),
      StringOffset userOffset = default(StringOffset),
      StringOffset passOffset = default(StringOffset),
      ushort dbVersion = 0,
      StringOffset dbMD5Offset = default(StringOffset),
      StringOffset dbNameOffset = default(StringOffset)) {
    builder.StartTable(7);
    Handshake.AddDbName(builder, dbNameOffset);
    Handshake.AddDbMD5(builder, dbMD5Offset);
    Handshake.AddPass(builder, passOffset);
    Handshake.AddUser(builder, userOffset);
    Handshake.AddHwid(builder, hwidOffset);
    Handshake.AddDbVersion(builder, dbVersion);
    Handshake.AddClientVersion(builder, clientVersion);
    return Handshake.EndHandshake(builder);
  }

  public static void StartHandshake(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddClientVersion(FlatBufferBuilder builder, ushort clientVersion) { builder.AddUshort(0, clientVersion, 0); }
  public static void AddHwid(FlatBufferBuilder builder, StringOffset hwidOffset) { builder.AddOffset(1, hwidOffset.Value, 0); }
  public static void AddUser(FlatBufferBuilder builder, StringOffset userOffset) { builder.AddOffset(2, userOffset.Value, 0); }
  public static void AddPass(FlatBufferBuilder builder, StringOffset passOffset) { builder.AddOffset(3, passOffset.Value, 0); }
  public static void AddDbVersion(FlatBufferBuilder builder, ushort dbVersion) { builder.AddUshort(4, dbVersion, 0); }
  public static void AddDbMD5(FlatBufferBuilder builder, StringOffset dbMD5Offset) { builder.AddOffset(5, dbMD5Offset.Value, 0); }
  public static void AddDbName(FlatBufferBuilder builder, StringOffset dbNameOffset) { builder.AddOffset(6, dbNameOffset.Value, 0); }
  public static Offset<protocol.Handshake> EndHandshake(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.Handshake>(o);
  }
  public static void FinishHandshakeBuffer(FlatBufferBuilder builder, Offset<protocol.Handshake> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedHandshakeBuffer(FlatBufferBuilder builder, Offset<protocol.Handshake> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
