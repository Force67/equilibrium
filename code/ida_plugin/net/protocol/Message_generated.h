// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MESSAGE_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_MESSAGE_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

#include "Announcement_generated.h"
#include "ChatMessage_generated.h"
#include "Handshake_generated.h"
#include "IdaSync_generated.h"
#include "Transfer_generated.h"
#include "Workspace_generated.h"

namespace protocol {

  struct Message;
  struct MessageBuilder;

  enum MsgType {
	MsgType_NONE = 0,
	MsgType_HandshakeRequest = 1,
	MsgType_HandshakeAck = 2,
	MsgType_Announcement = 3,
	MsgType_ChatMessage = 4,
	MsgType_LocalProjectInfo = 5,
	MsgType_RemoteProjectInfo = 6,
	MsgType_WorkspaceList = 7,
	MsgType_TransferBegin = 8,
	MsgType_TransferChunk = 9,
	MsgType_sync_NameEa = 10,
	MsgType_sync_AddFunction = 11,
	MsgType_sync_DeleteFunction = 12,
	MsgType_sync_SetFunctionStart = 13,
	MsgType_sync_SetFunctionEnd = 14,
	MsgType_sync_AppendFunctionTail = 15,
	MsgType_sync_DeleteFunctionTail = 16,
	MsgType_sync_ChangeFunctionTailOwner = 17,
	MsgType_sync_ChangeItemComment = 18,
	MsgType_sync_ChangeRangeComment = 19,
	MsgType_sync_ChangeExtraComment = 20,
	MsgType_sync_CreateEnum = 21,
	MsgType_sync_DeleteEnum = 22,
	MsgType_sync_CreateStruct = 23,
	MsgType_sync_RenameStruct = 24,
	MsgType_sync_DeleteStruct = 25,
	MsgType_sync_RenameStructMember = 26,
	MsgType_sync_DeleteStructMember = 27,
	MsgType_sync_ChangeStructMember = 28,
	MsgType_sync_ChangeItem = 29,
	MsgType_sync_MakeCode = 30,
	MsgType_sync_MakeData = 31,
	MsgType_sync_Undefine = 32,
	MsgType_sync_ChangeOperand = 33,
	MsgType_MIN = MsgType_NONE,
	MsgType_MAX = MsgType_sync_ChangeOperand
  };

  inline const MsgType (&EnumValuesMsgType())[34]
  {
	static const MsgType values[] = {
	  MsgType_NONE,
	  MsgType_HandshakeRequest,
	  MsgType_HandshakeAck,
	  MsgType_Announcement,
	  MsgType_ChatMessage,
	  MsgType_LocalProjectInfo,
	  MsgType_RemoteProjectInfo,
	  MsgType_WorkspaceList,
	  MsgType_TransferBegin,
	  MsgType_TransferChunk,
	  MsgType_sync_NameEa,
	  MsgType_sync_AddFunction,
	  MsgType_sync_DeleteFunction,
	  MsgType_sync_SetFunctionStart,
	  MsgType_sync_SetFunctionEnd,
	  MsgType_sync_AppendFunctionTail,
	  MsgType_sync_DeleteFunctionTail,
	  MsgType_sync_ChangeFunctionTailOwner,
	  MsgType_sync_ChangeItemComment,
	  MsgType_sync_ChangeRangeComment,
	  MsgType_sync_ChangeExtraComment,
	  MsgType_sync_CreateEnum,
	  MsgType_sync_DeleteEnum,
	  MsgType_sync_CreateStruct,
	  MsgType_sync_RenameStruct,
	  MsgType_sync_DeleteStruct,
	  MsgType_sync_RenameStructMember,
	  MsgType_sync_DeleteStructMember,
	  MsgType_sync_ChangeStructMember,
	  MsgType_sync_ChangeItem,
	  MsgType_sync_MakeCode,
	  MsgType_sync_MakeData,
	  MsgType_sync_Undefine,
	  MsgType_sync_ChangeOperand
	};
	return values;
  }

  inline const char *const *EnumNamesMsgType()
  {
	static const char *const names[35] = {
	  "NONE",
	  "HandshakeRequest",
	  "HandshakeAck",
	  "Announcement",
	  "ChatMessage",
	  "LocalProjectInfo",
	  "RemoteProjectInfo",
	  "WorkspaceList",
	  "TransferBegin",
	  "TransferChunk",
	  "sync_NameEa",
	  "sync_AddFunction",
	  "sync_DeleteFunction",
	  "sync_SetFunctionStart",
	  "sync_SetFunctionEnd",
	  "sync_AppendFunctionTail",
	  "sync_DeleteFunctionTail",
	  "sync_ChangeFunctionTailOwner",
	  "sync_ChangeItemComment",
	  "sync_ChangeRangeComment",
	  "sync_ChangeExtraComment",
	  "sync_CreateEnum",
	  "sync_DeleteEnum",
	  "sync_CreateStruct",
	  "sync_RenameStruct",
	  "sync_DeleteStruct",
	  "sync_RenameStructMember",
	  "sync_DeleteStructMember",
	  "sync_ChangeStructMember",
	  "sync_ChangeItem",
	  "sync_MakeCode",
	  "sync_MakeData",
	  "sync_Undefine",
	  "sync_ChangeOperand",
	  nullptr
	};
	return names;
  }

  inline const char *EnumNameMsgType(MsgType e)
  {
	if(flatbuffers::IsOutRange(e, MsgType_NONE, MsgType_sync_ChangeOperand))
	  return "";
	const size_t index = static_cast<size_t>(e);
	return EnumNamesMsgType()[index];
  }

  template <typename T>
  struct MsgTypeTraits {
	static const MsgType enum_value = MsgType_NONE;
  };

  template <>
  struct MsgTypeTraits<protocol::HandshakeRequest> {
	static const MsgType enum_value = MsgType_HandshakeRequest;
  };

  template <>
  struct MsgTypeTraits<protocol::HandshakeAck> {
	static const MsgType enum_value = MsgType_HandshakeAck;
  };

  template <>
  struct MsgTypeTraits<protocol::Announcement> {
	static const MsgType enum_value = MsgType_Announcement;
  };

  template <>
  struct MsgTypeTraits<protocol::ChatMessage> {
	static const MsgType enum_value = MsgType_ChatMessage;
  };

  template <>
  struct MsgTypeTraits<protocol::LocalProjectInfo> {
	static const MsgType enum_value = MsgType_LocalProjectInfo;
  };

  template <>
  struct MsgTypeTraits<protocol::RemoteProjectInfo> {
	static const MsgType enum_value = MsgType_RemoteProjectInfo;
  };

  template <>
  struct MsgTypeTraits<protocol::WorkspaceList> {
	static const MsgType enum_value = MsgType_WorkspaceList;
  };

  template <>
  struct MsgTypeTraits<protocol::TransferBegin> {
	static const MsgType enum_value = MsgType_TransferBegin;
  };

  template <>
  struct MsgTypeTraits<protocol::TransferChunk> {
	static const MsgType enum_value = MsgType_TransferChunk;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::NameEa> {
	static const MsgType enum_value = MsgType_sync_NameEa;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::AddFunction> {
	static const MsgType enum_value = MsgType_sync_AddFunction;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::DeleteFunction> {
	static const MsgType enum_value = MsgType_sync_DeleteFunction;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::SetFunctionStart> {
	static const MsgType enum_value = MsgType_sync_SetFunctionStart;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::SetFunctionEnd> {
	static const MsgType enum_value = MsgType_sync_SetFunctionEnd;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::AppendFunctionTail> {
	static const MsgType enum_value = MsgType_sync_AppendFunctionTail;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::DeleteFunctionTail> {
	static const MsgType enum_value = MsgType_sync_DeleteFunctionTail;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::ChangeFunctionTailOwner> {
	static const MsgType enum_value = MsgType_sync_ChangeFunctionTailOwner;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::ChangeItemComment> {
	static const MsgType enum_value = MsgType_sync_ChangeItemComment;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::ChangeRangeComment> {
	static const MsgType enum_value = MsgType_sync_ChangeRangeComment;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::ChangeExtraComment> {
	static const MsgType enum_value = MsgType_sync_ChangeExtraComment;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::CreateEnum> {
	static const MsgType enum_value = MsgType_sync_CreateEnum;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::DeleteEnum> {
	static const MsgType enum_value = MsgType_sync_DeleteEnum;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::CreateStruct> {
	static const MsgType enum_value = MsgType_sync_CreateStruct;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::RenameStruct> {
	static const MsgType enum_value = MsgType_sync_RenameStruct;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::DeleteStruct> {
	static const MsgType enum_value = MsgType_sync_DeleteStruct;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::RenameStructMember> {
	static const MsgType enum_value = MsgType_sync_RenameStructMember;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::DeleteStructMember> {
	static const MsgType enum_value = MsgType_sync_DeleteStructMember;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::ChangeStructMember> {
	static const MsgType enum_value = MsgType_sync_ChangeStructMember;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::ChangeItem> {
	static const MsgType enum_value = MsgType_sync_ChangeItem;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::MakeCode> {
	static const MsgType enum_value = MsgType_sync_MakeCode;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::MakeData> {
	static const MsgType enum_value = MsgType_sync_MakeData;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::Undefine> {
	static const MsgType enum_value = MsgType_sync_Undefine;
  };

  template <>
  struct MsgTypeTraits<protocol::sync::ChangeOperand> {
	static const MsgType enum_value = MsgType_sync_ChangeOperand;
  };

  bool VerifyMsgType(flatbuffers::Verifier &verifier, const void *obj, MsgType type);
  bool VerifyMsgTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

  struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef MessageBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_MSG_TYPE = 4,
	  VT_MSG = 6
	};
	protocol::MsgType msg_type() const
	{
	  return static_cast<protocol::MsgType>(GetField<uint8_t>(VT_MSG_TYPE, 0));
	}
	const void *msg() const
	{
	  return GetPointer<const void *>(VT_MSG);
	}
	template <typename T>
	const T *msg_as() const;
	const protocol::HandshakeRequest *msg_as_HandshakeRequest() const
	{
	  return msg_type() == protocol::MsgType_HandshakeRequest ? static_cast<const protocol::HandshakeRequest *>(msg()) : nullptr;
	}
	const protocol::HandshakeAck *msg_as_HandshakeAck() const
	{
	  return msg_type() == protocol::MsgType_HandshakeAck ? static_cast<const protocol::HandshakeAck *>(msg()) : nullptr;
	}
	const protocol::Announcement *msg_as_Announcement() const
	{
	  return msg_type() == protocol::MsgType_Announcement ? static_cast<const protocol::Announcement *>(msg()) : nullptr;
	}
	const protocol::ChatMessage *msg_as_ChatMessage() const
	{
	  return msg_type() == protocol::MsgType_ChatMessage ? static_cast<const protocol::ChatMessage *>(msg()) : nullptr;
	}
	const protocol::LocalProjectInfo *msg_as_LocalProjectInfo() const
	{
	  return msg_type() == protocol::MsgType_LocalProjectInfo ? static_cast<const protocol::LocalProjectInfo *>(msg()) : nullptr;
	}
	const protocol::RemoteProjectInfo *msg_as_RemoteProjectInfo() const
	{
	  return msg_type() == protocol::MsgType_RemoteProjectInfo ? static_cast<const protocol::RemoteProjectInfo *>(msg()) : nullptr;
	}
	const protocol::WorkspaceList *msg_as_WorkspaceList() const
	{
	  return msg_type() == protocol::MsgType_WorkspaceList ? static_cast<const protocol::WorkspaceList *>(msg()) : nullptr;
	}
	const protocol::TransferBegin *msg_as_TransferBegin() const
	{
	  return msg_type() == protocol::MsgType_TransferBegin ? static_cast<const protocol::TransferBegin *>(msg()) : nullptr;
	}
	const protocol::TransferChunk *msg_as_TransferChunk() const
	{
	  return msg_type() == protocol::MsgType_TransferChunk ? static_cast<const protocol::TransferChunk *>(msg()) : nullptr;
	}
	const protocol::sync::NameEa *msg_as_sync_NameEa() const
	{
	  return msg_type() == protocol::MsgType_sync_NameEa ? static_cast<const protocol::sync::NameEa *>(msg()) : nullptr;
	}
	const protocol::sync::AddFunction *msg_as_sync_AddFunction() const
	{
	  return msg_type() == protocol::MsgType_sync_AddFunction ? static_cast<const protocol::sync::AddFunction *>(msg()) : nullptr;
	}
	const protocol::sync::DeleteFunction *msg_as_sync_DeleteFunction() const
	{
	  return msg_type() == protocol::MsgType_sync_DeleteFunction ? static_cast<const protocol::sync::DeleteFunction *>(msg()) : nullptr;
	}
	const protocol::sync::SetFunctionStart *msg_as_sync_SetFunctionStart() const
	{
	  return msg_type() == protocol::MsgType_sync_SetFunctionStart ? static_cast<const protocol::sync::SetFunctionStart *>(msg()) : nullptr;
	}
	const protocol::sync::SetFunctionEnd *msg_as_sync_SetFunctionEnd() const
	{
	  return msg_type() == protocol::MsgType_sync_SetFunctionEnd ? static_cast<const protocol::sync::SetFunctionEnd *>(msg()) : nullptr;
	}
	const protocol::sync::AppendFunctionTail *msg_as_sync_AppendFunctionTail() const
	{
	  return msg_type() == protocol::MsgType_sync_AppendFunctionTail ? static_cast<const protocol::sync::AppendFunctionTail *>(msg()) : nullptr;
	}
	const protocol::sync::DeleteFunctionTail *msg_as_sync_DeleteFunctionTail() const
	{
	  return msg_type() == protocol::MsgType_sync_DeleteFunctionTail ? static_cast<const protocol::sync::DeleteFunctionTail *>(msg()) : nullptr;
	}
	const protocol::sync::ChangeFunctionTailOwner *msg_as_sync_ChangeFunctionTailOwner() const
	{
	  return msg_type() == protocol::MsgType_sync_ChangeFunctionTailOwner ? static_cast<const protocol::sync::ChangeFunctionTailOwner *>(msg()) : nullptr;
	}
	const protocol::sync::ChangeItemComment *msg_as_sync_ChangeItemComment() const
	{
	  return msg_type() == protocol::MsgType_sync_ChangeItemComment ? static_cast<const protocol::sync::ChangeItemComment *>(msg()) : nullptr;
	}
	const protocol::sync::ChangeRangeComment *msg_as_sync_ChangeRangeComment() const
	{
	  return msg_type() == protocol::MsgType_sync_ChangeRangeComment ? static_cast<const protocol::sync::ChangeRangeComment *>(msg()) : nullptr;
	}
	const protocol::sync::ChangeExtraComment *msg_as_sync_ChangeExtraComment() const
	{
	  return msg_type() == protocol::MsgType_sync_ChangeExtraComment ? static_cast<const protocol::sync::ChangeExtraComment *>(msg()) : nullptr;
	}
	const protocol::sync::CreateEnum *msg_as_sync_CreateEnum() const
	{
	  return msg_type() == protocol::MsgType_sync_CreateEnum ? static_cast<const protocol::sync::CreateEnum *>(msg()) : nullptr;
	}
	const protocol::sync::DeleteEnum *msg_as_sync_DeleteEnum() const
	{
	  return msg_type() == protocol::MsgType_sync_DeleteEnum ? static_cast<const protocol::sync::DeleteEnum *>(msg()) : nullptr;
	}
	const protocol::sync::CreateStruct *msg_as_sync_CreateStruct() const
	{
	  return msg_type() == protocol::MsgType_sync_CreateStruct ? static_cast<const protocol::sync::CreateStruct *>(msg()) : nullptr;
	}
	const protocol::sync::RenameStruct *msg_as_sync_RenameStruct() const
	{
	  return msg_type() == protocol::MsgType_sync_RenameStruct ? static_cast<const protocol::sync::RenameStruct *>(msg()) : nullptr;
	}
	const protocol::sync::DeleteStruct *msg_as_sync_DeleteStruct() const
	{
	  return msg_type() == protocol::MsgType_sync_DeleteStruct ? static_cast<const protocol::sync::DeleteStruct *>(msg()) : nullptr;
	}
	const protocol::sync::RenameStructMember *msg_as_sync_RenameStructMember() const
	{
	  return msg_type() == protocol::MsgType_sync_RenameStructMember ? static_cast<const protocol::sync::RenameStructMember *>(msg()) : nullptr;
	}
	const protocol::sync::DeleteStructMember *msg_as_sync_DeleteStructMember() const
	{
	  return msg_type() == protocol::MsgType_sync_DeleteStructMember ? static_cast<const protocol::sync::DeleteStructMember *>(msg()) : nullptr;
	}
	const protocol::sync::ChangeStructMember *msg_as_sync_ChangeStructMember() const
	{
	  return msg_type() == protocol::MsgType_sync_ChangeStructMember ? static_cast<const protocol::sync::ChangeStructMember *>(msg()) : nullptr;
	}
	const protocol::sync::ChangeItem *msg_as_sync_ChangeItem() const
	{
	  return msg_type() == protocol::MsgType_sync_ChangeItem ? static_cast<const protocol::sync::ChangeItem *>(msg()) : nullptr;
	}
	const protocol::sync::MakeCode *msg_as_sync_MakeCode() const
	{
	  return msg_type() == protocol::MsgType_sync_MakeCode ? static_cast<const protocol::sync::MakeCode *>(msg()) : nullptr;
	}
	const protocol::sync::MakeData *msg_as_sync_MakeData() const
	{
	  return msg_type() == protocol::MsgType_sync_MakeData ? static_cast<const protocol::sync::MakeData *>(msg()) : nullptr;
	}
	const protocol::sync::Undefine *msg_as_sync_Undefine() const
	{
	  return msg_type() == protocol::MsgType_sync_Undefine ? static_cast<const protocol::sync::Undefine *>(msg()) : nullptr;
	}
	const protocol::sync::ChangeOperand *msg_as_sync_ChangeOperand() const
	{
	  return msg_type() == protocol::MsgType_sync_ChangeOperand ? static_cast<const protocol::sync::ChangeOperand *>(msg()) : nullptr;
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
	         VerifyField<uint8_t>(verifier, VT_MSG_TYPE) &&
	         VerifyOffset(verifier, VT_MSG) &&
	         VerifyMsgType(verifier, msg(), msg_type()) &&
	         verifier.EndTable();
	}
  };

  template <>
  inline const protocol::HandshakeRequest *Message::msg_as<protocol::HandshakeRequest>() const
  {
	return msg_as_HandshakeRequest();
  }

  template <>
  inline const protocol::HandshakeAck *Message::msg_as<protocol::HandshakeAck>() const
  {
	return msg_as_HandshakeAck();
  }

  template <>
  inline const protocol::Announcement *Message::msg_as<protocol::Announcement>() const
  {
	return msg_as_Announcement();
  }

  template <>
  inline const protocol::ChatMessage *Message::msg_as<protocol::ChatMessage>() const
  {
	return msg_as_ChatMessage();
  }

  template <>
  inline const protocol::LocalProjectInfo *Message::msg_as<protocol::LocalProjectInfo>() const
  {
	return msg_as_LocalProjectInfo();
  }

  template <>
  inline const protocol::RemoteProjectInfo *Message::msg_as<protocol::RemoteProjectInfo>() const
  {
	return msg_as_RemoteProjectInfo();
  }

  template <>
  inline const protocol::WorkspaceList *Message::msg_as<protocol::WorkspaceList>() const
  {
	return msg_as_WorkspaceList();
  }

  template <>
  inline const protocol::TransferBegin *Message::msg_as<protocol::TransferBegin>() const
  {
	return msg_as_TransferBegin();
  }

  template <>
  inline const protocol::TransferChunk *Message::msg_as<protocol::TransferChunk>() const
  {
	return msg_as_TransferChunk();
  }

  template <>
  inline const protocol::sync::NameEa *Message::msg_as<protocol::sync::NameEa>() const
  {
	return msg_as_sync_NameEa();
  }

  template <>
  inline const protocol::sync::AddFunction *Message::msg_as<protocol::sync::AddFunction>() const
  {
	return msg_as_sync_AddFunction();
  }

  template <>
  inline const protocol::sync::DeleteFunction *Message::msg_as<protocol::sync::DeleteFunction>() const
  {
	return msg_as_sync_DeleteFunction();
  }

  template <>
  inline const protocol::sync::SetFunctionStart *Message::msg_as<protocol::sync::SetFunctionStart>() const
  {
	return msg_as_sync_SetFunctionStart();
  }

  template <>
  inline const protocol::sync::SetFunctionEnd *Message::msg_as<protocol::sync::SetFunctionEnd>() const
  {
	return msg_as_sync_SetFunctionEnd();
  }

  template <>
  inline const protocol::sync::AppendFunctionTail *Message::msg_as<protocol::sync::AppendFunctionTail>() const
  {
	return msg_as_sync_AppendFunctionTail();
  }

  template <>
  inline const protocol::sync::DeleteFunctionTail *Message::msg_as<protocol::sync::DeleteFunctionTail>() const
  {
	return msg_as_sync_DeleteFunctionTail();
  }

  template <>
  inline const protocol::sync::ChangeFunctionTailOwner *Message::msg_as<protocol::sync::ChangeFunctionTailOwner>() const
  {
	return msg_as_sync_ChangeFunctionTailOwner();
  }

  template <>
  inline const protocol::sync::ChangeItemComment *Message::msg_as<protocol::sync::ChangeItemComment>() const
  {
	return msg_as_sync_ChangeItemComment();
  }

  template <>
  inline const protocol::sync::ChangeRangeComment *Message::msg_as<protocol::sync::ChangeRangeComment>() const
  {
	return msg_as_sync_ChangeRangeComment();
  }

  template <>
  inline const protocol::sync::ChangeExtraComment *Message::msg_as<protocol::sync::ChangeExtraComment>() const
  {
	return msg_as_sync_ChangeExtraComment();
  }

  template <>
  inline const protocol::sync::CreateEnum *Message::msg_as<protocol::sync::CreateEnum>() const
  {
	return msg_as_sync_CreateEnum();
  }

  template <>
  inline const protocol::sync::DeleteEnum *Message::msg_as<protocol::sync::DeleteEnum>() const
  {
	return msg_as_sync_DeleteEnum();
  }

  template <>
  inline const protocol::sync::CreateStruct *Message::msg_as<protocol::sync::CreateStruct>() const
  {
	return msg_as_sync_CreateStruct();
  }

  template <>
  inline const protocol::sync::RenameStruct *Message::msg_as<protocol::sync::RenameStruct>() const
  {
	return msg_as_sync_RenameStruct();
  }

  template <>
  inline const protocol::sync::DeleteStruct *Message::msg_as<protocol::sync::DeleteStruct>() const
  {
	return msg_as_sync_DeleteStruct();
  }

  template <>
  inline const protocol::sync::RenameStructMember *Message::msg_as<protocol::sync::RenameStructMember>() const
  {
	return msg_as_sync_RenameStructMember();
  }

  template <>
  inline const protocol::sync::DeleteStructMember *Message::msg_as<protocol::sync::DeleteStructMember>() const
  {
	return msg_as_sync_DeleteStructMember();
  }

  template <>
  inline const protocol::sync::ChangeStructMember *Message::msg_as<protocol::sync::ChangeStructMember>() const
  {
	return msg_as_sync_ChangeStructMember();
  }

  template <>
  inline const protocol::sync::ChangeItem *Message::msg_as<protocol::sync::ChangeItem>() const
  {
	return msg_as_sync_ChangeItem();
  }

  template <>
  inline const protocol::sync::MakeCode *Message::msg_as<protocol::sync::MakeCode>() const
  {
	return msg_as_sync_MakeCode();
  }

  template <>
  inline const protocol::sync::MakeData *Message::msg_as<protocol::sync::MakeData>() const
  {
	return msg_as_sync_MakeData();
  }

  template <>
  inline const protocol::sync::Undefine *Message::msg_as<protocol::sync::Undefine>() const
  {
	return msg_as_sync_Undefine();
  }

  template <>
  inline const protocol::sync::ChangeOperand *Message::msg_as<protocol::sync::ChangeOperand>() const
  {
	return msg_as_sync_ChangeOperand();
  }

  struct MessageBuilder {
	typedef Message Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_msg_type(protocol::MsgType msg_type)
	{
	  fbb_.AddElement<uint8_t>(Message::VT_MSG_TYPE, static_cast<uint8_t>(msg_type), 0);
	}
	void add_msg(flatbuffers::Offset<void> msg)
	{
	  fbb_.AddOffset(Message::VT_MSG, msg);
	}
	explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	MessageBuilder &operator=(const MessageBuilder &);
	flatbuffers::Offset<Message> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<Message>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<Message> CreateMessage(
      flatbuffers::FlatBufferBuilder &_fbb,
      protocol::MsgType msg_type = protocol::MsgType_NONE,
      flatbuffers::Offset<void> msg = 0)
  {
	MessageBuilder builder_(_fbb);
	builder_.add_msg(msg);
	builder_.add_msg_type(msg_type);
	return builder_.Finish();
  }

  inline bool VerifyMsgType(flatbuffers::Verifier &verifier, const void *obj, MsgType type)
  {
	switch(type) {
	case MsgType_NONE: {
	  return true;
	}
	case MsgType_HandshakeRequest: {
	  auto ptr = reinterpret_cast<const protocol::HandshakeRequest *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_HandshakeAck: {
	  auto ptr = reinterpret_cast<const protocol::HandshakeAck *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_Announcement: {
	  auto ptr = reinterpret_cast<const protocol::Announcement *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_ChatMessage: {
	  auto ptr = reinterpret_cast<const protocol::ChatMessage *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_LocalProjectInfo: {
	  auto ptr = reinterpret_cast<const protocol::LocalProjectInfo *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_RemoteProjectInfo: {
	  auto ptr = reinterpret_cast<const protocol::RemoteProjectInfo *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_WorkspaceList: {
	  auto ptr = reinterpret_cast<const protocol::WorkspaceList *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_TransferBegin: {
	  auto ptr = reinterpret_cast<const protocol::TransferBegin *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_TransferChunk: {
	  auto ptr = reinterpret_cast<const protocol::TransferChunk *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_NameEa: {
	  auto ptr = reinterpret_cast<const protocol::sync::NameEa *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_AddFunction: {
	  auto ptr = reinterpret_cast<const protocol::sync::AddFunction *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_DeleteFunction: {
	  auto ptr = reinterpret_cast<const protocol::sync::DeleteFunction *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_SetFunctionStart: {
	  auto ptr = reinterpret_cast<const protocol::sync::SetFunctionStart *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_SetFunctionEnd: {
	  auto ptr = reinterpret_cast<const protocol::sync::SetFunctionEnd *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_AppendFunctionTail: {
	  auto ptr = reinterpret_cast<const protocol::sync::AppendFunctionTail *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_DeleteFunctionTail: {
	  auto ptr = reinterpret_cast<const protocol::sync::DeleteFunctionTail *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_ChangeFunctionTailOwner: {
	  auto ptr = reinterpret_cast<const protocol::sync::ChangeFunctionTailOwner *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_ChangeItemComment: {
	  auto ptr = reinterpret_cast<const protocol::sync::ChangeItemComment *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_ChangeRangeComment: {
	  auto ptr = reinterpret_cast<const protocol::sync::ChangeRangeComment *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_ChangeExtraComment: {
	  auto ptr = reinterpret_cast<const protocol::sync::ChangeExtraComment *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_CreateEnum: {
	  auto ptr = reinterpret_cast<const protocol::sync::CreateEnum *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_DeleteEnum: {
	  auto ptr = reinterpret_cast<const protocol::sync::DeleteEnum *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_CreateStruct: {
	  auto ptr = reinterpret_cast<const protocol::sync::CreateStruct *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_RenameStruct: {
	  auto ptr = reinterpret_cast<const protocol::sync::RenameStruct *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_DeleteStruct: {
	  auto ptr = reinterpret_cast<const protocol::sync::DeleteStruct *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_RenameStructMember: {
	  auto ptr = reinterpret_cast<const protocol::sync::RenameStructMember *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_DeleteStructMember: {
	  auto ptr = reinterpret_cast<const protocol::sync::DeleteStructMember *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_ChangeStructMember: {
	  auto ptr = reinterpret_cast<const protocol::sync::ChangeStructMember *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_ChangeItem: {
	  auto ptr = reinterpret_cast<const protocol::sync::ChangeItem *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_MakeCode: {
	  auto ptr = reinterpret_cast<const protocol::sync::MakeCode *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_MakeData: {
	  auto ptr = reinterpret_cast<const protocol::sync::MakeData *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_Undefine: {
	  auto ptr = reinterpret_cast<const protocol::sync::Undefine *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	case MsgType_sync_ChangeOperand: {
	  auto ptr = reinterpret_cast<const protocol::sync::ChangeOperand *>(obj);
	  return verifier.VerifyTable(ptr);
	}
	default: return true;
	}
  }

  inline bool VerifyMsgTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types)
  {
	if(!values || !types)
	  return !values && !types;
	if(values->size() != types->size())
	  return false;
	for(flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
	  if(!VerifyMsgType(
	         verifier, values->Get(i), types->GetEnum<MsgType>(i))) {
		return false;
	  }
	}
	return true;
  }

  inline const protocol::Message *GetMessage(const void *buf)
  {
	return flatbuffers::GetRoot<protocol::Message>(buf);
  }

  inline const protocol::Message *GetSizePrefixedMessage(const void *buf)
  {
	return flatbuffers::GetSizePrefixedRoot<protocol::Message>(buf);
  }

  inline bool VerifyMessageBuffer(
      flatbuffers::Verifier &verifier)
  {
	return verifier.VerifyBuffer<protocol::Message>(nullptr);
  }

  inline bool VerifySizePrefixedMessageBuffer(
      flatbuffers::Verifier &verifier)
  {
	return verifier.VerifySizePrefixedBuffer<protocol::Message>(nullptr);
  }

  inline void FinishMessageBuffer(
      flatbuffers::FlatBufferBuilder &fbb,
      flatbuffers::Offset<protocol::Message> root)
  {
	fbb.Finish(root);
  }

  inline void FinishSizePrefixedMessageBuffer(
      flatbuffers::FlatBufferBuilder &fbb,
      flatbuffers::Offset<protocol::Message> root)
  {
	fbb.FinishSizePrefixed(root);
  }

} // namespace protocol

#endif // FLATBUFFERS_GENERATED_MESSAGE_PROTOCOL_H_
