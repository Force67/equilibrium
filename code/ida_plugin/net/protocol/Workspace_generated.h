// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_WORKSPACE_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_WORKSPACE_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

namespace protocol {

  struct Project;
  struct ProjectBuilder;

  struct LocalProjectInfo;
  struct LocalProjectInfoBuilder;

  struct RemoteProjectInfo;
  struct RemoteProjectInfoBuilder;

  struct WorkspaceList;
  struct WorkspaceListBuilder;

  struct Project FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef ProjectBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_VERSION = 4,
	  VT_NAME = 6,
	  VT_MD5HASH = 8,
	  VT_COMMENTS = 10
	};
	int32_t version() const
	{
	  return GetField<int32_t>(VT_VERSION, 0);
	}
	const flatbuffers::String *name() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_NAME);
	}
	const flatbuffers::String *md5Hash() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_MD5HASH);
	}
	const flatbuffers::String *comments() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_COMMENTS);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
	         VerifyField<int32_t>(verifier, VT_VERSION) &&
	         VerifyOffset(verifier, VT_NAME) &&
	         verifier.VerifyString(name()) &&
	         VerifyOffset(verifier, VT_MD5HASH) &&
	         verifier.VerifyString(md5Hash()) &&
	         VerifyOffset(verifier, VT_COMMENTS) &&
	         verifier.VerifyString(comments()) &&
	         verifier.EndTable();
	}
  };

  struct ProjectBuilder {
	typedef Project Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_version(int32_t version)
	{
	  fbb_.AddElement<int32_t>(Project::VT_VERSION, version, 0);
	}
	void add_name(flatbuffers::Offset<flatbuffers::String> name)
	{
	  fbb_.AddOffset(Project::VT_NAME, name);
	}
	void add_md5Hash(flatbuffers::Offset<flatbuffers::String> md5Hash)
	{
	  fbb_.AddOffset(Project::VT_MD5HASH, md5Hash);
	}
	void add_comments(flatbuffers::Offset<flatbuffers::String> comments)
	{
	  fbb_.AddOffset(Project::VT_COMMENTS, comments);
	}
	explicit ProjectBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	ProjectBuilder &operator=(const ProjectBuilder &);
	flatbuffers::Offset<Project> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<Project>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<Project> CreateProject(
      flatbuffers::FlatBufferBuilder &_fbb,
      int32_t version = 0,
      flatbuffers::Offset<flatbuffers::String> name = 0,
      flatbuffers::Offset<flatbuffers::String> md5Hash = 0,
      flatbuffers::Offset<flatbuffers::String> comments = 0)
  {
	ProjectBuilder builder_(_fbb);
	builder_.add_comments(comments);
	builder_.add_md5Hash(md5Hash);
	builder_.add_name(name);
	builder_.add_version(version);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<Project> CreateProjectDirect(
      flatbuffers::FlatBufferBuilder &_fbb,
      int32_t version = 0,
      const char *name = nullptr,
      const char *md5Hash = nullptr,
      const char *comments = nullptr)
  {
	auto name__ = name ? _fbb.CreateString(name) : 0;
	auto md5Hash__ = md5Hash ? _fbb.CreateString(md5Hash) : 0;
	auto comments__ = comments ? _fbb.CreateString(comments) : 0;
	return protocol::CreateProject(
	    _fbb,
	    version,
	    name__,
	    md5Hash__,
	    comments__);
  }

  struct LocalProjectInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef LocalProjectInfoBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_VERSION = 4,
	  VT_NAME = 6,
	  VT_MD5HASH = 8
	};
	int32_t version() const
	{
	  return GetField<int32_t>(VT_VERSION, 0);
	}
	const flatbuffers::String *name() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_NAME);
	}
	const flatbuffers::String *md5Hash() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_MD5HASH);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
	         VerifyField<int32_t>(verifier, VT_VERSION) &&
	         VerifyOffset(verifier, VT_NAME) &&
	         verifier.VerifyString(name()) &&
	         VerifyOffset(verifier, VT_MD5HASH) &&
	         verifier.VerifyString(md5Hash()) &&
	         verifier.EndTable();
	}
  };

  struct LocalProjectInfoBuilder {
	typedef LocalProjectInfo Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_version(int32_t version)
	{
	  fbb_.AddElement<int32_t>(LocalProjectInfo::VT_VERSION, version, 0);
	}
	void add_name(flatbuffers::Offset<flatbuffers::String> name)
	{
	  fbb_.AddOffset(LocalProjectInfo::VT_NAME, name);
	}
	void add_md5Hash(flatbuffers::Offset<flatbuffers::String> md5Hash)
	{
	  fbb_.AddOffset(LocalProjectInfo::VT_MD5HASH, md5Hash);
	}
	explicit LocalProjectInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	LocalProjectInfoBuilder &operator=(const LocalProjectInfoBuilder &);
	flatbuffers::Offset<LocalProjectInfo> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<LocalProjectInfo>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<LocalProjectInfo> CreateLocalProjectInfo(
      flatbuffers::FlatBufferBuilder &_fbb,
      int32_t version = 0,
      flatbuffers::Offset<flatbuffers::String> name = 0,
      flatbuffers::Offset<flatbuffers::String> md5Hash = 0)
  {
	LocalProjectInfoBuilder builder_(_fbb);
	builder_.add_md5Hash(md5Hash);
	builder_.add_name(name);
	builder_.add_version(version);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<LocalProjectInfo> CreateLocalProjectInfoDirect(
      flatbuffers::FlatBufferBuilder &_fbb,
      int32_t version = 0,
      const char *name = nullptr,
      const char *md5Hash = nullptr)
  {
	auto name__ = name ? _fbb.CreateString(name) : 0;
	auto md5Hash__ = md5Hash ? _fbb.CreateString(md5Hash) : 0;
	return protocol::CreateLocalProjectInfo(
	    _fbb,
	    version,
	    name__,
	    md5Hash__);
  }

  struct RemoteProjectInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef RemoteProjectInfoBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_VERSION = 4,
	  VT_NAME = 6
	};
	int32_t version() const
	{
	  return GetField<int32_t>(VT_VERSION, 0);
	}
	const flatbuffers::String *name() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_NAME);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
	         VerifyField<int32_t>(verifier, VT_VERSION) &&
	         VerifyOffset(verifier, VT_NAME) &&
	         verifier.VerifyString(name()) &&
	         verifier.EndTable();
	}
  };

  struct RemoteProjectInfoBuilder {
	typedef RemoteProjectInfo Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_version(int32_t version)
	{
	  fbb_.AddElement<int32_t>(RemoteProjectInfo::VT_VERSION, version, 0);
	}
	void add_name(flatbuffers::Offset<flatbuffers::String> name)
	{
	  fbb_.AddOffset(RemoteProjectInfo::VT_NAME, name);
	}
	explicit RemoteProjectInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	RemoteProjectInfoBuilder &operator=(const RemoteProjectInfoBuilder &);
	flatbuffers::Offset<RemoteProjectInfo> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<RemoteProjectInfo>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<RemoteProjectInfo> CreateRemoteProjectInfo(
      flatbuffers::FlatBufferBuilder &_fbb,
      int32_t version = 0,
      flatbuffers::Offset<flatbuffers::String> name = 0)
  {
	RemoteProjectInfoBuilder builder_(_fbb);
	builder_.add_name(name);
	builder_.add_version(version);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<RemoteProjectInfo> CreateRemoteProjectInfoDirect(
      flatbuffers::FlatBufferBuilder &_fbb,
      int32_t version = 0,
      const char *name = nullptr)
  {
	auto name__ = name ? _fbb.CreateString(name) : 0;
	return protocol::CreateRemoteProjectInfo(
	    _fbb,
	    version,
	    name__);
  }

  struct WorkspaceList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef WorkspaceListBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_PROJECTS = 4
	};
	const flatbuffers::Vector<flatbuffers::Offset<protocol::Project>> *projects() const
	{
	  return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<protocol::Project>> *>(VT_PROJECTS);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
	         VerifyOffset(verifier, VT_PROJECTS) &&
	         verifier.VerifyVector(projects()) &&
	         verifier.VerifyVectorOfTables(projects()) &&
	         verifier.EndTable();
	}
  };

  struct WorkspaceListBuilder {
	typedef WorkspaceList Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_projects(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<protocol::Project>>> projects)
	{
	  fbb_.AddOffset(WorkspaceList::VT_PROJECTS, projects);
	}
	explicit WorkspaceListBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	WorkspaceListBuilder &operator=(const WorkspaceListBuilder &);
	flatbuffers::Offset<WorkspaceList> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<WorkspaceList>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<WorkspaceList> CreateWorkspaceList(
      flatbuffers::FlatBufferBuilder &_fbb,
      flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<protocol::Project>>> projects = 0)
  {
	WorkspaceListBuilder builder_(_fbb);
	builder_.add_projects(projects);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<WorkspaceList> CreateWorkspaceListDirect(
      flatbuffers::FlatBufferBuilder &_fbb,
      const std::vector<flatbuffers::Offset<protocol::Project>> *projects = nullptr)
  {
	auto projects__ = projects ? _fbb.CreateVector<flatbuffers::Offset<protocol::Project>>(*projects) : 0;
	return protocol::CreateWorkspaceList(
	    _fbb,
	    projects__);
  }

} // namespace protocol

#endif // FLATBUFFERS_GENERATED_WORKSPACE_PROTOCOL_H_
