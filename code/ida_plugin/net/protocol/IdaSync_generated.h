// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_IDASYNC_PROTOCOL_SYNC_H_
#define FLATBUFFERS_GENERATED_IDASYNC_PROTOCOL_SYNC_H_

#include "flatbuffers/flatbuffers.h"

namespace protocol {
namespace sync {

  struct NameEa;
  struct NameEaBuilder;

  struct AddFunction;
  struct AddFunctionBuilder;

  struct DeleteFunction;
  struct DeleteFunctionBuilder;

  struct SetFunctionStart;
  struct SetFunctionStartBuilder;

  struct SetFunctionEnd;
  struct SetFunctionEndBuilder;

  struct AppendFunctionTail;
  struct AppendFunctionTailBuilder;

  struct DeleteFunctionTail;
  struct DeleteFunctionTailBuilder;

  struct ChangeFunctionTailOwner;
  struct ChangeFunctionTailOwnerBuilder;

  struct ChangeItemComment;
  struct ChangeItemCommentBuilder;

  struct ChangeRangeComment;
  struct ChangeRangeCommentBuilder;

  struct ChangeExtraComment;
  struct ChangeExtraCommentBuilder;

  struct CreateEnum;
  struct CreateEnumBuilder;

  struct DeleteEnum;
  struct DeleteEnumBuilder;

  struct CreateStruct;
  struct CreateStructBuilder;

  struct RenameStruct;
  struct RenameStructBuilder;

  struct DeleteStruct;
  struct DeleteStructBuilder;

  struct RenameStructMember;
  struct RenameStructMemberBuilder;

  struct DeleteStructMember;
  struct DeleteStructMemberBuilder;

  struct ChangeStructMember;
  struct ChangeStructMemberBuilder;

  struct ChangeItem;
  struct ChangeItemBuilder;

  struct MakeCode;
  struct MakeCodeBuilder;

  struct MakeData;
  struct MakeDataBuilder;

  struct ChangeOperand;
  struct ChangeOperandBuilder;

  struct Undefine;
  struct UndefineBuilder;

  enum StructMemberType {
	StructMemberType_Data = 0,
	StructMemberType_Struct = 1,
	StructMemberType_String = 2,
	StructMemberType_Enum = 3,
	StructMemberType_Offset = 4,
	StructMemberType_MIN = StructMemberType_Data,
	StructMemberType_MAX = StructMemberType_Offset
  };

  inline const StructMemberType (&EnumValuesStructMemberType())[5]
  {
	static const StructMemberType values[] = {
	  StructMemberType_Data,
	  StructMemberType_Struct,
	  StructMemberType_String,
	  StructMemberType_Enum,
	  StructMemberType_Offset
	};
	return values;
  }

  inline const char *const *EnumNamesStructMemberType()
  {
	static const char *const names[6] = {
	  "Data",
	  "Struct",
	  "String",
	  "Enum",
	  "Offset",
	  nullptr
	};
	return names;
  }

  inline const char *EnumNameStructMemberType(StructMemberType e)
  {
	if(flatbuffers::IsOutRange(e, StructMemberType_Data, StructMemberType_Offset))
	  return "";
	const size_t index = static_cast<size_t>(e);
	return EnumNamesStructMemberType()[index];
  }

  enum OperandType {
	OperandType_Unsupported = -1,
	OperandType_Unknown = 0,
	OperandType_Enum = 1,
	OperandType_StructOffset = 2,
	OperandType_Offset = 3,
	OperandType_MIN = OperandType_Unsupported,
	OperandType_MAX = OperandType_Offset
  };

  inline const OperandType (&EnumValuesOperandType())[5]
  {
	static const OperandType values[] = {
	  OperandType_Unsupported,
	  OperandType_Unknown,
	  OperandType_Enum,
	  OperandType_StructOffset,
	  OperandType_Offset
	};
	return values;
  }

  inline const char *const *EnumNamesOperandType()
  {
	static const char *const names[6] = {
	  "Unsupported",
	  "Unknown",
	  "Enum",
	  "StructOffset",
	  "Offset",
	  nullptr
	};
	return names;
  }

  inline const char *EnumNameOperandType(OperandType e)
  {
	if(flatbuffers::IsOutRange(e, OperandType_Unsupported, OperandType_Offset))
	  return "";
	const size_t index = static_cast<size_t>(e) - static_cast<size_t>(OperandType_Unsupported);
	return EnumNamesOperandType()[index];
  }

  struct NameEa FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef NameEaBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_EA = 4,
	  VT_NAME = 6,
	  VT_LOCAL = 8
	};
	uint64_t ea() const
	{
	  return GetField<uint64_t>(VT_EA, 0);
	}
	const flatbuffers::String *name() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_NAME);
	}
	bool local() const
	{
	  return GetField<uint8_t>(VT_LOCAL, 0) != 0;
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_EA) &&
		     VerifyOffset(verifier, VT_NAME) &&
		     verifier.VerifyString(name()) &&
		     VerifyField<uint8_t>(verifier, VT_LOCAL) &&
		     verifier.EndTable();
	}
  };

  struct NameEaBuilder {
	typedef NameEa Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_ea(uint64_t ea)
	{
	  fbb_.AddElement<uint64_t>(NameEa::VT_EA, ea, 0);
	}
	void add_name(flatbuffers::Offset<flatbuffers::String> name)
	{
	  fbb_.AddOffset(NameEa::VT_NAME, name);
	}
	void add_local(bool local)
	{
	  fbb_.AddElement<uint8_t>(NameEa::VT_LOCAL, static_cast<uint8_t>(local), 0);
	}
	explicit NameEaBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	NameEaBuilder &operator=(const NameEaBuilder &);
	flatbuffers::Offset<NameEa> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<NameEa>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<NameEa> CreateNameEa(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0,
	  flatbuffers::Offset<flatbuffers::String> name = 0,
	  bool local = false)
  {
	NameEaBuilder builder_(_fbb);
	builder_.add_ea(ea);
	builder_.add_name(name);
	builder_.add_local(local);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<NameEa> CreateNameEaDirect(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0,
	  const char *name = nullptr,
	  bool local = false)
  {
	auto name__ = name ? _fbb.CreateString(name) : 0;
	return protocol::sync::CreateNameEa(
	    _fbb,
	    ea,
	    name__,
	    local);
  }

  struct AddFunction FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef AddFunctionBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_STARTEA = 4,
	  VT_ENDEA = 6
	};
	uint64_t startea() const
	{
	  return GetField<uint64_t>(VT_STARTEA, 0);
	}
	uint64_t endea() const
	{
	  return GetField<uint64_t>(VT_ENDEA, 0);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_STARTEA) &&
		     VerifyField<uint64_t>(verifier, VT_ENDEA) &&
		     verifier.EndTable();
	}
  };

  struct AddFunctionBuilder {
	typedef AddFunction Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_startea(uint64_t startea)
	{
	  fbb_.AddElement<uint64_t>(AddFunction::VT_STARTEA, startea, 0);
	}
	void add_endea(uint64_t endea)
	{
	  fbb_.AddElement<uint64_t>(AddFunction::VT_ENDEA, endea, 0);
	}
	explicit AddFunctionBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	AddFunctionBuilder &operator=(const AddFunctionBuilder &);
	flatbuffers::Offset<AddFunction> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<AddFunction>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<AddFunction> CreateAddFunction(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t startea = 0,
	  uint64_t endea = 0)
  {
	AddFunctionBuilder builder_(_fbb);
	builder_.add_endea(endea);
	builder_.add_startea(startea);
	return builder_.Finish();
  }

  struct DeleteFunction FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef DeleteFunctionBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_EA = 4
	};
	uint64_t ea() const
	{
	  return GetField<uint64_t>(VT_EA, 0);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_EA) &&
		     verifier.EndTable();
	}
  };

  struct DeleteFunctionBuilder {
	typedef DeleteFunction Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_ea(uint64_t ea)
	{
	  fbb_.AddElement<uint64_t>(DeleteFunction::VT_EA, ea, 0);
	}
	explicit DeleteFunctionBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	DeleteFunctionBuilder &operator=(const DeleteFunctionBuilder &);
	flatbuffers::Offset<DeleteFunction> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<DeleteFunction>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<DeleteFunction> CreateDeleteFunction(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0)
  {
	DeleteFunctionBuilder builder_(_fbb);
	builder_.add_ea(ea);
	return builder_.Finish();
  }

  struct SetFunctionStart FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef SetFunctionStartBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_EA = 4,
	  VT_NEWEA = 6
	};
	uint64_t ea() const
	{
	  return GetField<uint64_t>(VT_EA, 0);
	}
	uint64_t newea() const
	{
	  return GetField<uint64_t>(VT_NEWEA, 0);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_EA) &&
		     VerifyField<uint64_t>(verifier, VT_NEWEA) &&
		     verifier.EndTable();
	}
  };

  struct SetFunctionStartBuilder {
	typedef SetFunctionStart Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_ea(uint64_t ea)
	{
	  fbb_.AddElement<uint64_t>(SetFunctionStart::VT_EA, ea, 0);
	}
	void add_newea(uint64_t newea)
	{
	  fbb_.AddElement<uint64_t>(SetFunctionStart::VT_NEWEA, newea, 0);
	}
	explicit SetFunctionStartBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	SetFunctionStartBuilder &operator=(const SetFunctionStartBuilder &);
	flatbuffers::Offset<SetFunctionStart> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<SetFunctionStart>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<SetFunctionStart> CreateSetFunctionStart(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0,
	  uint64_t newea = 0)
  {
	SetFunctionStartBuilder builder_(_fbb);
	builder_.add_newea(newea);
	builder_.add_ea(ea);
	return builder_.Finish();
  }

  struct SetFunctionEnd FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef SetFunctionEndBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_STARTEA = 4,
	  VT_ENDEA = 6
	};
	uint64_t startea() const
	{
	  return GetField<uint64_t>(VT_STARTEA, 0);
	}
	uint64_t endea() const
	{
	  return GetField<uint64_t>(VT_ENDEA, 0);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_STARTEA) &&
		     VerifyField<uint64_t>(verifier, VT_ENDEA) &&
		     verifier.EndTable();
	}
  };

  struct SetFunctionEndBuilder {
	typedef SetFunctionEnd Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_startea(uint64_t startea)
	{
	  fbb_.AddElement<uint64_t>(SetFunctionEnd::VT_STARTEA, startea, 0);
	}
	void add_endea(uint64_t endea)
	{
	  fbb_.AddElement<uint64_t>(SetFunctionEnd::VT_ENDEA, endea, 0);
	}
	explicit SetFunctionEndBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	SetFunctionEndBuilder &operator=(const SetFunctionEndBuilder &);
	flatbuffers::Offset<SetFunctionEnd> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<SetFunctionEnd>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<SetFunctionEnd> CreateSetFunctionEnd(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t startea = 0,
	  uint64_t endea = 0)
  {
	SetFunctionEndBuilder builder_(_fbb);
	builder_.add_endea(endea);
	builder_.add_startea(startea);
	return builder_.Finish();
  }

  struct AppendFunctionTail FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef AppendFunctionTailBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_FUNCEA = 4,
	  VT_TAILEASTART = 6,
	  VT_TAILEAEND = 8
	};
	uint64_t funcea() const
	{
	  return GetField<uint64_t>(VT_FUNCEA, 0);
	}
	uint64_t tailEaStart() const
	{
	  return GetField<uint64_t>(VT_TAILEASTART, 0);
	}
	uint64_t tailEaEnd() const
	{
	  return GetField<uint64_t>(VT_TAILEAEND, 0);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_FUNCEA) &&
		     VerifyField<uint64_t>(verifier, VT_TAILEASTART) &&
		     VerifyField<uint64_t>(verifier, VT_TAILEAEND) &&
		     verifier.EndTable();
	}
  };

  struct AppendFunctionTailBuilder {
	typedef AppendFunctionTail Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_funcea(uint64_t funcea)
	{
	  fbb_.AddElement<uint64_t>(AppendFunctionTail::VT_FUNCEA, funcea, 0);
	}
	void add_tailEaStart(uint64_t tailEaStart)
	{
	  fbb_.AddElement<uint64_t>(AppendFunctionTail::VT_TAILEASTART, tailEaStart, 0);
	}
	void add_tailEaEnd(uint64_t tailEaEnd)
	{
	  fbb_.AddElement<uint64_t>(AppendFunctionTail::VT_TAILEAEND, tailEaEnd, 0);
	}
	explicit AppendFunctionTailBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	AppendFunctionTailBuilder &operator=(const AppendFunctionTailBuilder &);
	flatbuffers::Offset<AppendFunctionTail> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<AppendFunctionTail>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<AppendFunctionTail> CreateAppendFunctionTail(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t funcea = 0,
	  uint64_t tailEaStart = 0,
	  uint64_t tailEaEnd = 0)
  {
	AppendFunctionTailBuilder builder_(_fbb);
	builder_.add_tailEaEnd(tailEaEnd);
	builder_.add_tailEaStart(tailEaStart);
	builder_.add_funcea(funcea);
	return builder_.Finish();
  }

  struct DeleteFunctionTail FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef DeleteFunctionTailBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_FUNCEA = 4,
	  VT_TAILEA = 6
	};
	uint64_t funcea() const
	{
	  return GetField<uint64_t>(VT_FUNCEA, 0);
	}
	uint64_t tailea() const
	{
	  return GetField<uint64_t>(VT_TAILEA, 0);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_FUNCEA) &&
		     VerifyField<uint64_t>(verifier, VT_TAILEA) &&
		     verifier.EndTable();
	}
  };

  struct DeleteFunctionTailBuilder {
	typedef DeleteFunctionTail Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_funcea(uint64_t funcea)
	{
	  fbb_.AddElement<uint64_t>(DeleteFunctionTail::VT_FUNCEA, funcea, 0);
	}
	void add_tailea(uint64_t tailea)
	{
	  fbb_.AddElement<uint64_t>(DeleteFunctionTail::VT_TAILEA, tailea, 0);
	}
	explicit DeleteFunctionTailBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	DeleteFunctionTailBuilder &operator=(const DeleteFunctionTailBuilder &);
	flatbuffers::Offset<DeleteFunctionTail> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<DeleteFunctionTail>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<DeleteFunctionTail> CreateDeleteFunctionTail(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t funcea = 0,
	  uint64_t tailea = 0)
  {
	DeleteFunctionTailBuilder builder_(_fbb);
	builder_.add_tailea(tailea);
	builder_.add_funcea(funcea);
	return builder_.Finish();
  }

  struct ChangeFunctionTailOwner FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef ChangeFunctionTailOwnerBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_TAILEA = 4,
	  VT_FUNCSTART = 6
	};
	uint64_t tailea() const
	{
	  return GetField<uint64_t>(VT_TAILEA, 0);
	}
	uint64_t funcstart() const
	{
	  return GetField<uint64_t>(VT_FUNCSTART, 0);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_TAILEA) &&
		     VerifyField<uint64_t>(verifier, VT_FUNCSTART) &&
		     verifier.EndTable();
	}
  };

  struct ChangeFunctionTailOwnerBuilder {
	typedef ChangeFunctionTailOwner Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_tailea(uint64_t tailea)
	{
	  fbb_.AddElement<uint64_t>(ChangeFunctionTailOwner::VT_TAILEA, tailea, 0);
	}
	void add_funcstart(uint64_t funcstart)
	{
	  fbb_.AddElement<uint64_t>(ChangeFunctionTailOwner::VT_FUNCSTART, funcstart, 0);
	}
	explicit ChangeFunctionTailOwnerBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	ChangeFunctionTailOwnerBuilder &operator=(const ChangeFunctionTailOwnerBuilder &);
	flatbuffers::Offset<ChangeFunctionTailOwner> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<ChangeFunctionTailOwner>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<ChangeFunctionTailOwner> CreateChangeFunctionTailOwner(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t tailea = 0,
	  uint64_t funcstart = 0)
  {
	ChangeFunctionTailOwnerBuilder builder_(_fbb);
	builder_.add_funcstart(funcstart);
	builder_.add_tailea(tailea);
	return builder_.Finish();
  }

  struct ChangeItemComment FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef ChangeItemCommentBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_EA = 4,
	  VT_COMMENT = 6,
	  VT_REPEATABLE = 8
	};
	uint64_t ea() const
	{
	  return GetField<uint64_t>(VT_EA, 0);
	}
	const flatbuffers::String *comment() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_COMMENT);
	}
	bool repeatable() const
	{
	  return GetField<uint8_t>(VT_REPEATABLE, 0) != 0;
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_EA) &&
		     VerifyOffset(verifier, VT_COMMENT) &&
		     verifier.VerifyString(comment()) &&
		     VerifyField<uint8_t>(verifier, VT_REPEATABLE) &&
		     verifier.EndTable();
	}
  };

  struct ChangeItemCommentBuilder {
	typedef ChangeItemComment Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_ea(uint64_t ea)
	{
	  fbb_.AddElement<uint64_t>(ChangeItemComment::VT_EA, ea, 0);
	}
	void add_comment(flatbuffers::Offset<flatbuffers::String> comment)
	{
	  fbb_.AddOffset(ChangeItemComment::VT_COMMENT, comment);
	}
	void add_repeatable(bool repeatable)
	{
	  fbb_.AddElement<uint8_t>(ChangeItemComment::VT_REPEATABLE, static_cast<uint8_t>(repeatable), 0);
	}
	explicit ChangeItemCommentBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	ChangeItemCommentBuilder &operator=(const ChangeItemCommentBuilder &);
	flatbuffers::Offset<ChangeItemComment> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<ChangeItemComment>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<ChangeItemComment> CreateChangeItemComment(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0,
	  flatbuffers::Offset<flatbuffers::String> comment = 0,
	  bool repeatable = false)
  {
	ChangeItemCommentBuilder builder_(_fbb);
	builder_.add_ea(ea);
	builder_.add_comment(comment);
	builder_.add_repeatable(repeatable);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<ChangeItemComment> CreateChangeItemCommentDirect(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0,
	  const char *comment = nullptr,
	  bool repeatable = false)
  {
	auto comment__ = comment ? _fbb.CreateString(comment) : 0;
	return protocol::sync::CreateChangeItemComment(
	    _fbb,
	    ea,
	    comment__,
	    repeatable);
  }

  struct ChangeRangeComment FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef ChangeRangeCommentBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_EA = 4,
	  VT_KIND = 6,
	  VT_COMMENT = 8,
	  VT_REPEATABLE = 10
	};
	uint64_t ea() const
	{
	  return GetField<uint64_t>(VT_EA, 0);
	}
	int32_t kind() const
	{
	  return GetField<int32_t>(VT_KIND, 0);
	}
	const flatbuffers::String *comment() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_COMMENT);
	}
	bool repeatable() const
	{
	  return GetField<uint8_t>(VT_REPEATABLE, 0) != 0;
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_EA) &&
		     VerifyField<int32_t>(verifier, VT_KIND) &&
		     VerifyOffset(verifier, VT_COMMENT) &&
		     verifier.VerifyString(comment()) &&
		     VerifyField<uint8_t>(verifier, VT_REPEATABLE) &&
		     verifier.EndTable();
	}
  };

  struct ChangeRangeCommentBuilder {
	typedef ChangeRangeComment Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_ea(uint64_t ea)
	{
	  fbb_.AddElement<uint64_t>(ChangeRangeComment::VT_EA, ea, 0);
	}
	void add_kind(int32_t kind)
	{
	  fbb_.AddElement<int32_t>(ChangeRangeComment::VT_KIND, kind, 0);
	}
	void add_comment(flatbuffers::Offset<flatbuffers::String> comment)
	{
	  fbb_.AddOffset(ChangeRangeComment::VT_COMMENT, comment);
	}
	void add_repeatable(bool repeatable)
	{
	  fbb_.AddElement<uint8_t>(ChangeRangeComment::VT_REPEATABLE, static_cast<uint8_t>(repeatable), 0);
	}
	explicit ChangeRangeCommentBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	ChangeRangeCommentBuilder &operator=(const ChangeRangeCommentBuilder &);
	flatbuffers::Offset<ChangeRangeComment> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<ChangeRangeComment>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<ChangeRangeComment> CreateChangeRangeComment(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0,
	  int32_t kind = 0,
	  flatbuffers::Offset<flatbuffers::String> comment = 0,
	  bool repeatable = false)
  {
	ChangeRangeCommentBuilder builder_(_fbb);
	builder_.add_ea(ea);
	builder_.add_comment(comment);
	builder_.add_kind(kind);
	builder_.add_repeatable(repeatable);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<ChangeRangeComment> CreateChangeRangeCommentDirect(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0,
	  int32_t kind = 0,
	  const char *comment = nullptr,
	  bool repeatable = false)
  {
	auto comment__ = comment ? _fbb.CreateString(comment) : 0;
	return protocol::sync::CreateChangeRangeComment(
	    _fbb,
	    ea,
	    kind,
	    comment__,
	    repeatable);
  }

  struct ChangeExtraComment FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef ChangeExtraCommentBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_EA = 4,
	  VT_LINE = 6,
	  VT_COMMENT = 8
	};
	uint64_t ea() const
	{
	  return GetField<uint64_t>(VT_EA, 0);
	}
	int32_t line() const
	{
	  return GetField<int32_t>(VT_LINE, 0);
	}
	const flatbuffers::String *comment() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_COMMENT);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_EA) &&
		     VerifyField<int32_t>(verifier, VT_LINE) &&
		     VerifyOffset(verifier, VT_COMMENT) &&
		     verifier.VerifyString(comment()) &&
		     verifier.EndTable();
	}
  };

  struct ChangeExtraCommentBuilder {
	typedef ChangeExtraComment Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_ea(uint64_t ea)
	{
	  fbb_.AddElement<uint64_t>(ChangeExtraComment::VT_EA, ea, 0);
	}
	void add_line(int32_t line)
	{
	  fbb_.AddElement<int32_t>(ChangeExtraComment::VT_LINE, line, 0);
	}
	void add_comment(flatbuffers::Offset<flatbuffers::String> comment)
	{
	  fbb_.AddOffset(ChangeExtraComment::VT_COMMENT, comment);
	}
	explicit ChangeExtraCommentBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	ChangeExtraCommentBuilder &operator=(const ChangeExtraCommentBuilder &);
	flatbuffers::Offset<ChangeExtraComment> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<ChangeExtraComment>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<ChangeExtraComment> CreateChangeExtraComment(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0,
	  int32_t line = 0,
	  flatbuffers::Offset<flatbuffers::String> comment = 0)
  {
	ChangeExtraCommentBuilder builder_(_fbb);
	builder_.add_ea(ea);
	builder_.add_comment(comment);
	builder_.add_line(line);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<ChangeExtraComment> CreateChangeExtraCommentDirect(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0,
	  int32_t line = 0,
	  const char *comment = nullptr)
  {
	auto comment__ = comment ? _fbb.CreateString(comment) : 0;
	return protocol::sync::CreateChangeExtraComment(
	    _fbb,
	    ea,
	    line,
	    comment__);
  }

  struct CreateEnum FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef CreateEnumBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_ID = 4,
	  VT_NAME = 6
	};
	uint64_t id() const
	{
	  return GetField<uint64_t>(VT_ID, 0);
	}
	const flatbuffers::String *name() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_NAME);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_ID) &&
		     VerifyOffset(verifier, VT_NAME) &&
		     verifier.VerifyString(name()) &&
		     verifier.EndTable();
	}
  };

  struct CreateEnumBuilder {
	typedef CreateEnum Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_id(uint64_t id)
	{
	  fbb_.AddElement<uint64_t>(CreateEnum::VT_ID, id, 0);
	}
	void add_name(flatbuffers::Offset<flatbuffers::String> name)
	{
	  fbb_.AddOffset(CreateEnum::VT_NAME, name);
	}
	explicit CreateEnumBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	CreateEnumBuilder &operator=(const CreateEnumBuilder &);
	flatbuffers::Offset<CreateEnum> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<CreateEnum>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<CreateEnum> CreateCreateEnum(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t id = 0,
	  flatbuffers::Offset<flatbuffers::String> name = 0)
  {
	CreateEnumBuilder builder_(_fbb);
	builder_.add_id(id);
	builder_.add_name(name);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<CreateEnum> CreateCreateEnumDirect(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t id = 0,
	  const char *name = nullptr)
  {
	auto name__ = name ? _fbb.CreateString(name) : 0;
	return protocol::sync::CreateCreateEnum(
	    _fbb,
	    id,
	    name__);
  }

  struct DeleteEnum FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef DeleteEnumBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_NAME = 4
	};
	const flatbuffers::String *name() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_NAME);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyOffset(verifier, VT_NAME) &&
		     verifier.VerifyString(name()) &&
		     verifier.EndTable();
	}
  };

  struct DeleteEnumBuilder {
	typedef DeleteEnum Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_name(flatbuffers::Offset<flatbuffers::String> name)
	{
	  fbb_.AddOffset(DeleteEnum::VT_NAME, name);
	}
	explicit DeleteEnumBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	DeleteEnumBuilder &operator=(const DeleteEnumBuilder &);
	flatbuffers::Offset<DeleteEnum> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<DeleteEnum>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<DeleteEnum> CreateDeleteEnum(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  flatbuffers::Offset<flatbuffers::String> name = 0)
  {
	DeleteEnumBuilder builder_(_fbb);
	builder_.add_name(name);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<DeleteEnum> CreateDeleteEnumDirect(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  const char *name = nullptr)
  {
	auto name__ = name ? _fbb.CreateString(name) : 0;
	return protocol::sync::CreateDeleteEnum(
	    _fbb,
	    name__);
  }

  struct CreateStruct FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef CreateStructBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_NAME = 4,
	  VT_ISUNION = 6
	};
	const flatbuffers::String *name() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_NAME);
	}
	bool isUnion() const
	{
	  return GetField<uint8_t>(VT_ISUNION, 0) != 0;
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyOffset(verifier, VT_NAME) &&
		     verifier.VerifyString(name()) &&
		     VerifyField<uint8_t>(verifier, VT_ISUNION) &&
		     verifier.EndTable();
	}
  };

  struct CreateStructBuilder {
	typedef CreateStruct Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_name(flatbuffers::Offset<flatbuffers::String> name)
	{
	  fbb_.AddOffset(CreateStruct::VT_NAME, name);
	}
	void add_isUnion(bool isUnion)
	{
	  fbb_.AddElement<uint8_t>(CreateStruct::VT_ISUNION, static_cast<uint8_t>(isUnion), 0);
	}
	explicit CreateStructBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	CreateStructBuilder &operator=(const CreateStructBuilder &);
	flatbuffers::Offset<CreateStruct> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<CreateStruct>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<CreateStruct> CreateCreateStruct(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  flatbuffers::Offset<flatbuffers::String> name = 0,
	  bool isUnion = false)
  {
	CreateStructBuilder builder_(_fbb);
	builder_.add_name(name);
	builder_.add_isUnion(isUnion);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<CreateStruct> CreateCreateStructDirect(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  const char *name = nullptr,
	  bool isUnion = false)
  {
	auto name__ = name ? _fbb.CreateString(name) : 0;
	return protocol::sync::CreateCreateStruct(
	    _fbb,
	    name__,
	    isUnion);
  }

  struct RenameStruct FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef RenameStructBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_OLDNAME = 4,
	  VT_NEWNAME = 6
	};
	const flatbuffers::String *oldName() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_OLDNAME);
	}
	const flatbuffers::String *newName() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_NEWNAME);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyOffset(verifier, VT_OLDNAME) &&
		     verifier.VerifyString(oldName()) &&
		     VerifyOffset(verifier, VT_NEWNAME) &&
		     verifier.VerifyString(newName()) &&
		     verifier.EndTable();
	}
  };

  struct RenameStructBuilder {
	typedef RenameStruct Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_oldName(flatbuffers::Offset<flatbuffers::String> oldName)
	{
	  fbb_.AddOffset(RenameStruct::VT_OLDNAME, oldName);
	}
	void add_newName(flatbuffers::Offset<flatbuffers::String> newName)
	{
	  fbb_.AddOffset(RenameStruct::VT_NEWNAME, newName);
	}
	explicit RenameStructBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	RenameStructBuilder &operator=(const RenameStructBuilder &);
	flatbuffers::Offset<RenameStruct> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<RenameStruct>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<RenameStruct> CreateRenameStruct(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  flatbuffers::Offset<flatbuffers::String> oldName = 0,
	  flatbuffers::Offset<flatbuffers::String> newName = 0)
  {
	RenameStructBuilder builder_(_fbb);
	builder_.add_newName(newName);
	builder_.add_oldName(oldName);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<RenameStruct> CreateRenameStructDirect(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  const char *oldName = nullptr,
	  const char *newName = nullptr)
  {
	auto oldName__ = oldName ? _fbb.CreateString(oldName) : 0;
	auto newName__ = newName ? _fbb.CreateString(newName) : 0;
	return protocol::sync::CreateRenameStruct(
	    _fbb,
	    oldName__,
	    newName__);
  }

  struct DeleteStruct FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef DeleteStructBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_NAME = 4
	};
	const flatbuffers::String *name() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_NAME);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyOffset(verifier, VT_NAME) &&
		     verifier.VerifyString(name()) &&
		     verifier.EndTable();
	}
  };

  struct DeleteStructBuilder {
	typedef DeleteStruct Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_name(flatbuffers::Offset<flatbuffers::String> name)
	{
	  fbb_.AddOffset(DeleteStruct::VT_NAME, name);
	}
	explicit DeleteStructBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	DeleteStructBuilder &operator=(const DeleteStructBuilder &);
	flatbuffers::Offset<DeleteStruct> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<DeleteStruct>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<DeleteStruct> CreateDeleteStruct(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  flatbuffers::Offset<flatbuffers::String> name = 0)
  {
	DeleteStructBuilder builder_(_fbb);
	builder_.add_name(name);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<DeleteStruct> CreateDeleteStructDirect(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  const char *name = nullptr)
  {
	auto name__ = name ? _fbb.CreateString(name) : 0;
	return protocol::sync::CreateDeleteStruct(
	    _fbb,
	    name__);
  }

  struct RenameStructMember FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef RenameStructMemberBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_STRUCTNAME = 4,
	  VT_MEMBERNAME = 6,
	  VT_OFFSET = 8
	};
	const flatbuffers::String *structName() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_STRUCTNAME);
	}
	const flatbuffers::String *memberName() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_MEMBERNAME);
	}
	uint64_t offset() const
	{
	  return GetField<uint64_t>(VT_OFFSET, 0);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyOffset(verifier, VT_STRUCTNAME) &&
		     verifier.VerifyString(structName()) &&
		     VerifyOffset(verifier, VT_MEMBERNAME) &&
		     verifier.VerifyString(memberName()) &&
		     VerifyField<uint64_t>(verifier, VT_OFFSET) &&
		     verifier.EndTable();
	}
  };

  struct RenameStructMemberBuilder {
	typedef RenameStructMember Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_structName(flatbuffers::Offset<flatbuffers::String> structName)
	{
	  fbb_.AddOffset(RenameStructMember::VT_STRUCTNAME, structName);
	}
	void add_memberName(flatbuffers::Offset<flatbuffers::String> memberName)
	{
	  fbb_.AddOffset(RenameStructMember::VT_MEMBERNAME, memberName);
	}
	void add_offset(uint64_t offset)
	{
	  fbb_.AddElement<uint64_t>(RenameStructMember::VT_OFFSET, offset, 0);
	}
	explicit RenameStructMemberBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	RenameStructMemberBuilder &operator=(const RenameStructMemberBuilder &);
	flatbuffers::Offset<RenameStructMember> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<RenameStructMember>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<RenameStructMember> CreateRenameStructMember(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  flatbuffers::Offset<flatbuffers::String> structName = 0,
	  flatbuffers::Offset<flatbuffers::String> memberName = 0,
	  uint64_t offset = 0)
  {
	RenameStructMemberBuilder builder_(_fbb);
	builder_.add_offset(offset);
	builder_.add_memberName(memberName);
	builder_.add_structName(structName);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<RenameStructMember> CreateRenameStructMemberDirect(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  const char *structName = nullptr,
	  const char *memberName = nullptr,
	  uint64_t offset = 0)
  {
	auto structName__ = structName ? _fbb.CreateString(structName) : 0;
	auto memberName__ = memberName ? _fbb.CreateString(memberName) : 0;
	return protocol::sync::CreateRenameStructMember(
	    _fbb,
	    structName__,
	    memberName__,
	    offset);
  }

  struct DeleteStructMember FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef DeleteStructMemberBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_EA = 4,
	  VT_NAME = 6
	};
	uint64_t ea() const
	{
	  return GetField<uint64_t>(VT_EA, 0);
	}
	const flatbuffers::String *name() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_NAME);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_EA) &&
		     VerifyOffset(verifier, VT_NAME) &&
		     verifier.VerifyString(name()) &&
		     verifier.EndTable();
	}
  };

  struct DeleteStructMemberBuilder {
	typedef DeleteStructMember Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_ea(uint64_t ea)
	{
	  fbb_.AddElement<uint64_t>(DeleteStructMember::VT_EA, ea, 0);
	}
	void add_name(flatbuffers::Offset<flatbuffers::String> name)
	{
	  fbb_.AddOffset(DeleteStructMember::VT_NAME, name);
	}
	explicit DeleteStructMemberBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	DeleteStructMemberBuilder &operator=(const DeleteStructMemberBuilder &);
	flatbuffers::Offset<DeleteStructMember> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<DeleteStructMember>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<DeleteStructMember> CreateDeleteStructMember(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0,
	  flatbuffers::Offset<flatbuffers::String> name = 0)
  {
	DeleteStructMemberBuilder builder_(_fbb);
	builder_.add_ea(ea);
	builder_.add_name(name);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<DeleteStructMember> CreateDeleteStructMemberDirect(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0,
	  const char *name = nullptr)
  {
	auto name__ = name ? _fbb.CreateString(name) : 0;
	return protocol::sync::CreateDeleteStructMember(
	    _fbb,
	    ea,
	    name__);
  }

  struct ChangeStructMember FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef ChangeStructMemberBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_STRUCTNAME = 4,
	  VT_MEMBERNAME = 6,
	  VT_TYPE = 8,
	  VT_OFFSET = 10,
	  VT_SIZE = 12,
	  VT_FLAGS = 14,
	  VT_TARGETSTRUCTNAME = 16,
	  VT_STRINGTYPE = 18
	};
	const flatbuffers::String *structName() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_STRUCTNAME);
	}
	const flatbuffers::String *memberName() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_MEMBERNAME);
	}
	protocol::sync::StructMemberType type() const
	{
	  return static_cast<protocol::sync::StructMemberType>(GetField<int8_t>(VT_TYPE, 0));
	}
	uint64_t offset() const
	{
	  return GetField<uint64_t>(VT_OFFSET, 0);
	}
	uint64_t size() const
	{
	  return GetField<uint64_t>(VT_SIZE, 0);
	}
	uint32_t flags() const
	{
	  return GetField<uint32_t>(VT_FLAGS, 0);
	}
	const flatbuffers::String *targetStructName() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_TARGETSTRUCTNAME);
	}
	int32_t stringType() const
	{
	  return GetField<int32_t>(VT_STRINGTYPE, 0);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyOffset(verifier, VT_STRUCTNAME) &&
		     verifier.VerifyString(structName()) &&
		     VerifyOffset(verifier, VT_MEMBERNAME) &&
		     verifier.VerifyString(memberName()) &&
		     VerifyField<int8_t>(verifier, VT_TYPE) &&
		     VerifyField<uint64_t>(verifier, VT_OFFSET) &&
		     VerifyField<uint64_t>(verifier, VT_SIZE) &&
		     VerifyField<uint32_t>(verifier, VT_FLAGS) &&
		     VerifyOffset(verifier, VT_TARGETSTRUCTNAME) &&
		     verifier.VerifyString(targetStructName()) &&
		     VerifyField<int32_t>(verifier, VT_STRINGTYPE) &&
		     verifier.EndTable();
	}
  };

  struct ChangeStructMemberBuilder {
	typedef ChangeStructMember Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_structName(flatbuffers::Offset<flatbuffers::String> structName)
	{
	  fbb_.AddOffset(ChangeStructMember::VT_STRUCTNAME, structName);
	}
	void add_memberName(flatbuffers::Offset<flatbuffers::String> memberName)
	{
	  fbb_.AddOffset(ChangeStructMember::VT_MEMBERNAME, memberName);
	}
	void add_type(protocol::sync::StructMemberType type)
	{
	  fbb_.AddElement<int8_t>(ChangeStructMember::VT_TYPE, static_cast<int8_t>(type), 0);
	}
	void add_offset(uint64_t offset)
	{
	  fbb_.AddElement<uint64_t>(ChangeStructMember::VT_OFFSET, offset, 0);
	}
	void add_size(uint64_t size)
	{
	  fbb_.AddElement<uint64_t>(ChangeStructMember::VT_SIZE, size, 0);
	}
	void add_flags(uint32_t flags)
	{
	  fbb_.AddElement<uint32_t>(ChangeStructMember::VT_FLAGS, flags, 0);
	}
	void add_targetStructName(flatbuffers::Offset<flatbuffers::String> targetStructName)
	{
	  fbb_.AddOffset(ChangeStructMember::VT_TARGETSTRUCTNAME, targetStructName);
	}
	void add_stringType(int32_t stringType)
	{
	  fbb_.AddElement<int32_t>(ChangeStructMember::VT_STRINGTYPE, stringType, 0);
	}
	explicit ChangeStructMemberBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	ChangeStructMemberBuilder &operator=(const ChangeStructMemberBuilder &);
	flatbuffers::Offset<ChangeStructMember> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<ChangeStructMember>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<ChangeStructMember> CreateChangeStructMember(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  flatbuffers::Offset<flatbuffers::String> structName = 0,
	  flatbuffers::Offset<flatbuffers::String> memberName = 0,
	  protocol::sync::StructMemberType type = protocol::sync::StructMemberType_Data,
	  uint64_t offset = 0,
	  uint64_t size = 0,
	  uint32_t flags = 0,
	  flatbuffers::Offset<flatbuffers::String> targetStructName = 0,
	  int32_t stringType = 0)
  {
	ChangeStructMemberBuilder builder_(_fbb);
	builder_.add_size(size);
	builder_.add_offset(offset);
	builder_.add_stringType(stringType);
	builder_.add_targetStructName(targetStructName);
	builder_.add_flags(flags);
	builder_.add_memberName(memberName);
	builder_.add_structName(structName);
	builder_.add_type(type);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<ChangeStructMember> CreateChangeStructMemberDirect(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  const char *structName = nullptr,
	  const char *memberName = nullptr,
	  protocol::sync::StructMemberType type = protocol::sync::StructMemberType_Data,
	  uint64_t offset = 0,
	  uint64_t size = 0,
	  uint32_t flags = 0,
	  const char *targetStructName = nullptr,
	  int32_t stringType = 0)
  {
	auto structName__ = structName ? _fbb.CreateString(structName) : 0;
	auto memberName__ = memberName ? _fbb.CreateString(memberName) : 0;
	auto targetStructName__ = targetStructName ? _fbb.CreateString(targetStructName) : 0;
	return protocol::sync::CreateChangeStructMember(
	    _fbb,
	    structName__,
	    memberName__,
	    type,
	    offset,
	    size,
	    flags,
	    targetStructName__,
	    stringType);
  }

  struct ChangeItem FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef ChangeItemBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_EA = 4,
	  VT_TYPE = 6,
	  VT_NAMES = 8
	};
	uint64_t ea() const
	{
	  return GetField<uint64_t>(VT_EA, 0);
	}
	const flatbuffers::String *type() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_TYPE);
	}
	const flatbuffers::String *names() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_NAMES);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_EA) &&
		     VerifyOffset(verifier, VT_TYPE) &&
		     verifier.VerifyString(type()) &&
		     VerifyOffset(verifier, VT_NAMES) &&
		     verifier.VerifyString(names()) &&
		     verifier.EndTable();
	}
  };

  struct ChangeItemBuilder {
	typedef ChangeItem Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_ea(uint64_t ea)
	{
	  fbb_.AddElement<uint64_t>(ChangeItem::VT_EA, ea, 0);
	}
	void add_type(flatbuffers::Offset<flatbuffers::String> type)
	{
	  fbb_.AddOffset(ChangeItem::VT_TYPE, type);
	}
	void add_names(flatbuffers::Offset<flatbuffers::String> names)
	{
	  fbb_.AddOffset(ChangeItem::VT_NAMES, names);
	}
	explicit ChangeItemBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	ChangeItemBuilder &operator=(const ChangeItemBuilder &);
	flatbuffers::Offset<ChangeItem> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<ChangeItem>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<ChangeItem> CreateChangeItem(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0,
	  flatbuffers::Offset<flatbuffers::String> type = 0,
	  flatbuffers::Offset<flatbuffers::String> names = 0)
  {
	ChangeItemBuilder builder_(_fbb);
	builder_.add_ea(ea);
	builder_.add_names(names);
	builder_.add_type(type);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<ChangeItem> CreateChangeItemDirect(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0,
	  const char *type = nullptr,
	  const char *names = nullptr)
  {
	auto type__ = type ? _fbb.CreateString(type) : 0;
	auto names__ = names ? _fbb.CreateString(names) : 0;
	return protocol::sync::CreateChangeItem(
	    _fbb,
	    ea,
	    type__,
	    names__);
  }

  struct MakeCode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef MakeCodeBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_EA = 4
	};
	uint64_t ea() const
	{
	  return GetField<uint64_t>(VT_EA, 0);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_EA) &&
		     verifier.EndTable();
	}
  };

  struct MakeCodeBuilder {
	typedef MakeCode Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_ea(uint64_t ea)
	{
	  fbb_.AddElement<uint64_t>(MakeCode::VT_EA, ea, 0);
	}
	explicit MakeCodeBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	MakeCodeBuilder &operator=(const MakeCodeBuilder &);
	flatbuffers::Offset<MakeCode> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<MakeCode>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<MakeCode> CreateMakeCode(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0)
  {
	MakeCodeBuilder builder_(_fbb);
	builder_.add_ea(ea);
	return builder_.Finish();
  }

  struct MakeData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef MakeDataBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_EA = 4,
	  VT_FLAGS = 6,
	  VT_LENGTH = 8,
	  VT_TID = 10
	};
	uint64_t ea() const
	{
	  return GetField<uint64_t>(VT_EA, 0);
	}
	uint32_t flags() const
	{
	  return GetField<uint32_t>(VT_FLAGS, 0);
	}
	uint32_t length() const
	{
	  return GetField<uint32_t>(VT_LENGTH, 0);
	}
	uint64_t tid() const
	{
	  return GetField<uint64_t>(VT_TID, 0);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_EA) &&
		     VerifyField<uint32_t>(verifier, VT_FLAGS) &&
		     VerifyField<uint32_t>(verifier, VT_LENGTH) &&
		     VerifyField<uint64_t>(verifier, VT_TID) &&
		     verifier.EndTable();
	}
  };

  struct MakeDataBuilder {
	typedef MakeData Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_ea(uint64_t ea)
	{
	  fbb_.AddElement<uint64_t>(MakeData::VT_EA, ea, 0);
	}
	void add_flags(uint32_t flags)
	{
	  fbb_.AddElement<uint32_t>(MakeData::VT_FLAGS, flags, 0);
	}
	void add_length(uint32_t length)
	{
	  fbb_.AddElement<uint32_t>(MakeData::VT_LENGTH, length, 0);
	}
	void add_tid(uint64_t tid)
	{
	  fbb_.AddElement<uint64_t>(MakeData::VT_TID, tid, 0);
	}
	explicit MakeDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	MakeDataBuilder &operator=(const MakeDataBuilder &);
	flatbuffers::Offset<MakeData> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<MakeData>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<MakeData> CreateMakeData(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0,
	  uint32_t flags = 0,
	  uint32_t length = 0,
	  uint64_t tid = 0)
  {
	MakeDataBuilder builder_(_fbb);
	builder_.add_tid(tid);
	builder_.add_ea(ea);
	builder_.add_length(length);
	builder_.add_flags(flags);
	return builder_.Finish();
  }

  struct ChangeOperand FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef ChangeOperandBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_EA = 4,
	  VT_TYPE = 6,
	  VT_OPCOUNT = 8,
	  VT_FLAGS = 10,
	  VT_OFFSET = 12
	};
	uint64_t ea() const
	{
	  return GetField<uint64_t>(VT_EA, 0);
	}
	protocol::sync::OperandType type() const
	{
	  return static_cast<protocol::sync::OperandType>(GetField<int8_t>(VT_TYPE, 0));
	}
	int8_t opCount() const
	{
	  return GetField<int8_t>(VT_OPCOUNT, 0);
	}
	uint32_t flags() const
	{
	  return GetField<uint32_t>(VT_FLAGS, 0);
	}
	uint64_t offset() const
	{
	  return GetField<uint64_t>(VT_OFFSET, 0);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_EA) &&
		     VerifyField<int8_t>(verifier, VT_TYPE) &&
		     VerifyField<int8_t>(verifier, VT_OPCOUNT) &&
		     VerifyField<uint32_t>(verifier, VT_FLAGS) &&
		     VerifyField<uint64_t>(verifier, VT_OFFSET) &&
		     verifier.EndTable();
	}
  };

  struct ChangeOperandBuilder {
	typedef ChangeOperand Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_ea(uint64_t ea)
	{
	  fbb_.AddElement<uint64_t>(ChangeOperand::VT_EA, ea, 0);
	}
	void add_type(protocol::sync::OperandType type)
	{
	  fbb_.AddElement<int8_t>(ChangeOperand::VT_TYPE, static_cast<int8_t>(type), 0);
	}
	void add_opCount(int8_t opCount)
	{
	  fbb_.AddElement<int8_t>(ChangeOperand::VT_OPCOUNT, opCount, 0);
	}
	void add_flags(uint32_t flags)
	{
	  fbb_.AddElement<uint32_t>(ChangeOperand::VT_FLAGS, flags, 0);
	}
	void add_offset(uint64_t offset)
	{
	  fbb_.AddElement<uint64_t>(ChangeOperand::VT_OFFSET, offset, 0);
	}
	explicit ChangeOperandBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	ChangeOperandBuilder &operator=(const ChangeOperandBuilder &);
	flatbuffers::Offset<ChangeOperand> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<ChangeOperand>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<ChangeOperand> CreateChangeOperand(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0,
	  protocol::sync::OperandType type = protocol::sync::OperandType_Unknown,
	  int8_t opCount = 0,
	  uint32_t flags = 0,
	  uint64_t offset = 0)
  {
	ChangeOperandBuilder builder_(_fbb);
	builder_.add_offset(offset);
	builder_.add_ea(ea);
	builder_.add_flags(flags);
	builder_.add_opCount(opCount);
	builder_.add_type(type);
	return builder_.Finish();
  }

  struct Undefine FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef UndefineBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_EA = 4
	};
	uint64_t ea() const
	{
	  return GetField<uint64_t>(VT_EA, 0);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
		     VerifyField<uint64_t>(verifier, VT_EA) &&
		     verifier.EndTable();
	}
  };

  struct UndefineBuilder {
	typedef Undefine Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_ea(uint64_t ea)
	{
	  fbb_.AddElement<uint64_t>(Undefine::VT_EA, ea, 0);
	}
	explicit UndefineBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	UndefineBuilder &operator=(const UndefineBuilder &);
	flatbuffers::Offset<Undefine> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<Undefine>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<Undefine> CreateUndefine(
	  flatbuffers::FlatBufferBuilder &_fbb,
	  uint64_t ea = 0)
  {
	UndefineBuilder builder_(_fbb);
	builder_.add_ea(ea);
	return builder_.Finish();
  }

}
} // namespace protocol::sync

#endif // FLATBUFFERS_GENERATED_IDASYNC_PROTOCOL_SYNC_H_
