// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TRANSFER_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_TRANSFER_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

namespace protocol {

  struct TransferBegin;
  struct TransferBeginBuilder;

  struct TransferChunk;
  struct TransferChunkBuilder;

  struct TransferBegin FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef TransferBeginBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_TRANSFERID = 4,
	  VT_FILENAME = 6,
	  VT_FILESIZE = 8,
	  VT_NUMCHUNKS = 10
	};
	uint32_t transferId() const
	{
	  return GetField<uint32_t>(VT_TRANSFERID, 0);
	}
	const flatbuffers::String *fileName() const
	{
	  return GetPointer<const flatbuffers::String *>(VT_FILENAME);
	}
	uint32_t fileSize() const
	{
	  return GetField<uint32_t>(VT_FILESIZE, 0);
	}
	uint32_t numChunks() const
	{
	  return GetField<uint32_t>(VT_NUMCHUNKS, 0);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
	         VerifyField<uint32_t>(verifier, VT_TRANSFERID) &&
	         VerifyOffset(verifier, VT_FILENAME) &&
	         verifier.VerifyString(fileName()) &&
	         VerifyField<uint32_t>(verifier, VT_FILESIZE) &&
	         VerifyField<uint32_t>(verifier, VT_NUMCHUNKS) &&
	         verifier.EndTable();
	}
  };

  struct TransferBeginBuilder {
	typedef TransferBegin Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_transferId(uint32_t transferId)
	{
	  fbb_.AddElement<uint32_t>(TransferBegin::VT_TRANSFERID, transferId, 0);
	}
	void add_fileName(flatbuffers::Offset<flatbuffers::String> fileName)
	{
	  fbb_.AddOffset(TransferBegin::VT_FILENAME, fileName);
	}
	void add_fileSize(uint32_t fileSize)
	{
	  fbb_.AddElement<uint32_t>(TransferBegin::VT_FILESIZE, fileSize, 0);
	}
	void add_numChunks(uint32_t numChunks)
	{
	  fbb_.AddElement<uint32_t>(TransferBegin::VT_NUMCHUNKS, numChunks, 0);
	}
	explicit TransferBeginBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	TransferBeginBuilder &operator=(const TransferBeginBuilder &);
	flatbuffers::Offset<TransferBegin> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<TransferBegin>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<TransferBegin> CreateTransferBegin(
      flatbuffers::FlatBufferBuilder &_fbb,
      uint32_t transferId = 0,
      flatbuffers::Offset<flatbuffers::String> fileName = 0,
      uint32_t fileSize = 0,
      uint32_t numChunks = 0)
  {
	TransferBeginBuilder builder_(_fbb);
	builder_.add_numChunks(numChunks);
	builder_.add_fileSize(fileSize);
	builder_.add_fileName(fileName);
	builder_.add_transferId(transferId);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<TransferBegin> CreateTransferBeginDirect(
      flatbuffers::FlatBufferBuilder &_fbb,
      uint32_t transferId = 0,
      const char *fileName = nullptr,
      uint32_t fileSize = 0,
      uint32_t numChunks = 0)
  {
	auto fileName__ = fileName ? _fbb.CreateString(fileName) : 0;
	return protocol::CreateTransferBegin(
	    _fbb,
	    transferId,
	    fileName__,
	    fileSize,
	    numChunks);
  }

  struct TransferChunk FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef TransferChunkBuilder Builder;
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
	  VT_TRANSFERID = 4,
	  VT_CHUNKID = 6,
	  VT_DATA = 8
	};
	uint32_t transferId() const
	{
	  return GetField<uint32_t>(VT_TRANSFERID, 0);
	}
	uint32_t chunkId() const
	{
	  return GetField<uint32_t>(VT_CHUNKID, 0);
	}
	const flatbuffers::Vector<uint8_t> *data() const
	{
	  return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
	  return VerifyTableStart(verifier) &&
	         VerifyField<uint32_t>(verifier, VT_TRANSFERID) &&
	         VerifyField<uint32_t>(verifier, VT_CHUNKID) &&
	         VerifyOffset(verifier, VT_DATA) &&
	         verifier.VerifyVector(data()) &&
	         verifier.EndTable();
	}
  };

  struct TransferChunkBuilder {
	typedef TransferChunk Table;
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_transferId(uint32_t transferId)
	{
	  fbb_.AddElement<uint32_t>(TransferChunk::VT_TRANSFERID, transferId, 0);
	}
	void add_chunkId(uint32_t chunkId)
	{
	  fbb_.AddElement<uint32_t>(TransferChunk::VT_CHUNKID, chunkId, 0);
	}
	void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data)
	{
	  fbb_.AddOffset(TransferChunk::VT_DATA, data);
	}
	explicit TransferChunkBuilder(flatbuffers::FlatBufferBuilder &_fbb) :
	    fbb_(_fbb)
	{
	  start_ = fbb_.StartTable();
	}
	TransferChunkBuilder &operator=(const TransferChunkBuilder &);
	flatbuffers::Offset<TransferChunk> Finish()
	{
	  const auto end = fbb_.EndTable(start_);
	  auto o = flatbuffers::Offset<TransferChunk>(end);
	  return o;
	}
  };

  inline flatbuffers::Offset<TransferChunk> CreateTransferChunk(
      flatbuffers::FlatBufferBuilder &_fbb,
      uint32_t transferId = 0,
      uint32_t chunkId = 0,
      flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0)
  {
	TransferChunkBuilder builder_(_fbb);
	builder_.add_data(data);
	builder_.add_chunkId(chunkId);
	builder_.add_transferId(transferId);
	return builder_.Finish();
  }

  inline flatbuffers::Offset<TransferChunk> CreateTransferChunkDirect(
      flatbuffers::FlatBufferBuilder &_fbb,
      uint32_t transferId = 0,
      uint32_t chunkId = 0,
      const std::vector<uint8_t> *data = nullptr)
  {
	auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
	return protocol::CreateTransferChunk(
	    _fbb,
	    transferId,
	    chunkId,
	    data__);
  }

} // namespace protocol

#endif // FLATBUFFERS_GENERATED_TRANSFER_PROTOCOL_H_
