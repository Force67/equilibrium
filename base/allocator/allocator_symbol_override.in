// Copyright (C) 2021 Force67 <github.com/Force67>.
// For licensing information see LICENSE at the root of this distribution.
// These musn't be in a namespace as they override the global symbols.

#include <memory>
#include <base/export.h>
#include <base/allocator/allocator_primitives.h>

#if 0
// Placement new
BASE_EXPORT void* operator new(size_t size, void* param) {
  return param;
}
#endif

#if defined(CONFIG_DEBUG)
BASE_EXPORT void* operator new(size_t size, const base::SourceLocation& source_loc) {
  return base::allocator_primitives::AllocateTracked(size, source_loc);
}

BASE_EXPORT void operator delete(void* p, const base::SourceLocation& source_loc) noexcept {
  base::allocator_primitives::FreeTracked(p, source_loc);
}

BASE_EXPORT void* operator new[](size_t size, const base::SourceLocation& source_loc) {
  return base::allocator_primitives::AllocateTracked(size, source_loc);
}

BASE_EXPORT void operator delete[](void* p, const base::SourceLocation& source_loc) noexcept {
  base::allocator_primitives::FreeTracked(p, source_loc);
}
#endif

BASE_EXPORT void* operator new(size_t size) {
  return base::allocator_primitives::Allocate(size);
}

BASE_EXPORT void operator delete(void* p) noexcept {
  base::allocator_primitives::Free(p);
}

BASE_EXPORT void* operator new[](size_t size) {
  return base::allocator_primitives::Allocate(size);
}

BASE_EXPORT void operator delete[](void* p) noexcept {
  base::allocator_primitives::Free(p);
}

BASE_EXPORT void* operator new(size_t size, const std::nothrow_t&) noexcept {
  // TODO(Force): NoThrow shit..
  return base::allocator_primitives::Allocate(size);
}

BASE_EXPORT void* operator new[](size_t size, const std::nothrow_t&) noexcept {
  return base::allocator_primitives::Allocate(size);
}

BASE_EXPORT void operator delete(void* p, const std::nothrow_t&) noexcept {
  base::allocator_primitives::Free(p);
}

BASE_EXPORT void operator delete[](void* p, const std::nothrow_t&) noexcept {
  base::allocator_primitives::Free(p);
}

BASE_EXPORT void operator delete(void* p, size_t) noexcept {
  base::allocator_primitives::Free(p);
}

BASE_EXPORT void operator delete[](void* p, size_t) noexcept {
  base::allocator_primitives::Free(p);
}