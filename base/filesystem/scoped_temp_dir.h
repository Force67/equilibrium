// Copyright (C) 2021 Force67 <github.com/Force67>.
// For licensing information see LICENSE at the root of this distribution.
#pragma once

#include "base/export.h"
#include "base/compiler.h"
#include "base/filesystem/path.h"

namespace base {

class BASE_EXPORT ScopedTempDir {
 public:
  // No directory is owned/created initially.
  ScopedTempDir();
  // Recursively delete path.
  ~ScopedTempDir();

  const Path& path() { return path_; }

  // Creates a unique directory in TempPath, and takes ownership of it.
  // See file_util::CreateNewTemporaryDirectory.
  bool CreateUniqueTempDir() WARN_UNUSED_RESULT;

  // Creates a unique directory under a given path, and takes ownership of it.
  bool CreateUniqueTempDirUnderPath(const Path& path) WARN_UNUSED_RESULT;

  bool Set(const Path& path) WARN_UNUSED_RESULT;

  // Deletes the temporary directory wrapped by this object.
  bool Delete() WARN_UNUSED_RESULT;

  // Returns true if path_ is non-empty and exists.
  bool IsValid() const;

  // Returns the prefix used for temp directory names generated by
  // ScopedTempDirs.
  static const Path::CharType* GetTempDirPrefix();

 private:
  Path path_;
};

}  // namespace base