// Copyright (C) Force67 <github.com/Force67>.
// For licensing information see LICENSE at the root of this distribution.
// This file defines the protocol used to comminicate IDB changes.
namespace protocol.sync;

// Note that ea's (addresses) are represented as 64 bit numbers, 
// even on 32 bit ida instances

table NameEa {
    ea:uint64;
    name:string;
    local:bool;
}

table AddFunction {
    start_ea:uint64;
    endea:uint64;
}

table DeleteFunction {
    ea:uint64;
}

table SetFunctionStart {
    ea:uint64;
    new_ea:uint64;
}

table SetFunctionEnd {
    start_ea:uint64;
    end_ea:uint64;
}

table AppendFunctionTail {
    func_ea:uint64;
    tail_ea_start:uint64;
    tail_ea_end:uint64;
}

table DeleteFunctionTail {
    func_ea:uint64;
    tail_ea:uint64;
}

table ChangeFunctionTailOwner {
    tail_ea:uint64;
    func_start:uint64;
}

table ChangeItemComment {
    ea:uint64;
    comment:string;
    repeatable:bool;
}

table ChangeRangeComment {
    ea:uint64;
    kind:int;
    comment:string;
    repeatable:bool;
}

table ChangeExtraComment {
    ea:uint64;
    line:int;
    comment:string;
}

table CreateEnum {
    id:uint64;
    name:string;
}

table DeleteEnum {
    name:string;
}

table CreateStruct {
    name:string;
    is_union:bool;
}

table RenameStruct {
    old_name:string;
    new_name:string;
}

table DeleteStruct {
    name:string;
}

table RenameStructMember {
    struct_name:string;
    member_name:string;
    offset:uint64;
}

table DeleteStructMember {
    ea:uint64;
    name:string;
}

enum StructMemberType : byte
{
    Data,
    Struct,
    String,
    Enum,
    Offset
}

table ChangeStructMember {
    struct_name:string;
    member_name:string;
    type:StructMemberType;

    offset:uint64;
    size:uint64;
    flags:uint;

    target_struct_name:string;
    string_type:int;
    // TODO: ReflInfo
}

table ChangeItem {
    ea:uint64;
    type:string;
    names:string;
}

table MakeCode {
    ea:uint64;
}

table MakeData {
    ea:uint64;
    flags:uint;
    length:uint;
    tid:uint64;
}

enum OperandType : byte
{
    Unsupported = -1,
    Unknown,
    Enum,
    StructOffset,
    Offset,
}

table ChangeOperand {
    ea:uint64;
    type:OperandType;
    op_count:byte;
    flags:uint;
    offset:uint64;
}

table Undefine {
    ea:uint64;
}